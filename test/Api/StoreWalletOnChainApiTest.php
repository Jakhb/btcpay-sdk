<?php
/**
 * StoreWalletOnChainApiTest
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * StoreWalletOnChainApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StoreWalletOnChainApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for storeOnChainPaymentMethodsGenerateOnChainWallet
     *
     * Generate store on-chain wallet.
     *
     */
    public function testStoreOnChainPaymentMethodsGenerateOnChainWallet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainPaymentMethodsGetOnChainPaymentMethodPreview
     *
     * Preview store on-chain payment method addresses.
     *
     */
    public function testStoreOnChainPaymentMethodsGetOnChainPaymentMethodPreview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainPaymentMethodsPOSTOnChainPaymentMethodPreview
     *
     * Preview proposed store on-chain payment method addresses.
     *
     */
    public function testStoreOnChainPaymentMethodsPOSTOnChainPaymentMethodPreview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsAddOrUpdateOnChainWalletLink
     *
     * Add/Update store on-chain wallet object link.
     *
     */
    public function testStoreOnChainWalletsAddOrUpdateOnChainWalletLink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsAddOrUpdateOnChainWalletObjects
     *
     * Add/Update store on-chain wallet objects.
     *
     */
    public function testStoreOnChainWalletsAddOrUpdateOnChainWalletObjects()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsCreateOnChainTransaction
     *
     * Create store on-chain wallet transaction.
     *
     */
    public function testStoreOnChainWalletsCreateOnChainTransaction()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsGetOnChainFeeRate
     *
     * Get store on-chain wallet fee rate.
     *
     */
    public function testStoreOnChainWalletsGetOnChainFeeRate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsGetOnChainWalletObject
     *
     * Get store on-chain wallet object.
     *
     */
    public function testStoreOnChainWalletsGetOnChainWalletObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsGetOnChainWalletObjects
     *
     * Get store on-chain wallet objects.
     *
     */
    public function testStoreOnChainWalletsGetOnChainWalletObjects()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsGetOnChainWalletReceiveAddress
     *
     * Get store on-chain wallet address.
     *
     */
    public function testStoreOnChainWalletsGetOnChainWalletReceiveAddress()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsGetOnChainWalletTransaction
     *
     * Get store on-chain wallet transaction.
     *
     */
    public function testStoreOnChainWalletsGetOnChainWalletTransaction()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsGetOnChainWalletUTXOs
     *
     * Get store on-chain wallet UTXOS.
     *
     */
    public function testStoreOnChainWalletsGetOnChainWalletUTXOs()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsPatchOnChainWalletTransaction
     *
     * Patch store on-chain wallet transaction info.
     *
     */
    public function testStoreOnChainWalletsPatchOnChainWalletTransaction()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsRemoveOnChainWalletLink
     *
     * Remove store on-chain wallet object links.
     *
     */
    public function testStoreOnChainWalletsRemoveOnChainWalletLink()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsRemoveOnChainWalletObject
     *
     * Remove store on-chain wallet objects.
     *
     */
    public function testStoreOnChainWalletsRemoveOnChainWalletObject()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsShowOnChainWalletHistogram
     *
     * Get store on-chain wallet balance histogram.
     *
     */
    public function testStoreOnChainWalletsShowOnChainWalletHistogram()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsShowOnChainWalletOverview
     *
     * Get store on-chain wallet overview.
     *
     */
    public function testStoreOnChainWalletsShowOnChainWalletOverview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsShowOnChainWalletTransactions
     *
     * Get store on-chain wallet transactions.
     *
     */
    public function testStoreOnChainWalletsShowOnChainWalletTransactions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storeOnChainWalletsUnReserveOnChainWalletReceiveAddress
     *
     * UnReserve last store on-chain wallet address.
     *
     */
    public function testStoreOnChainWalletsUnReserveOnChainWalletReceiveAddress()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
