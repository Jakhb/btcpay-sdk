<?php
/**
 * StoresRatesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StoresRatesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StoresRatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'storesGetStoreRateConfiguration' => [
            'application/json',
        ],
        'storesGetStoreRates' => [
            'application/json',
        ],
        'storesPreviewStoreRateConfiguration' => [
            'application/json',
        ],
        'storesUpdateStoreRateConfiguration' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation storesGetStoreRateConfiguration
     *
     * Get store rate settings for the specified rate source
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StoreRateConfiguration
     */
    public function storesGetStoreRateConfiguration($rate_source, $store_id, string $contentType = self::contentTypes['storesGetStoreRateConfiguration'][0])
    {
        list($response) = $this->storesGetStoreRateConfigurationWithHttpInfo($rate_source, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation storesGetStoreRateConfigurationWithHttpInfo
     *
     * Get store rate settings for the specified rate source
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StoreRateConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function storesGetStoreRateConfigurationWithHttpInfo($rate_source, $store_id, string $contentType = self::contentTypes['storesGetStoreRateConfiguration'][0])
    {
        $request = $this->storesGetStoreRateConfigurationRequest($rate_source, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\StoreRateConfiguration',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\StoreRateConfiguration',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StoreRateConfiguration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storesGetStoreRateConfigurationAsync
     *
     * Get store rate settings for the specified rate source
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storesGetStoreRateConfigurationAsync($rate_source, $store_id, string $contentType = self::contentTypes['storesGetStoreRateConfiguration'][0])
    {
        return $this->storesGetStoreRateConfigurationAsyncWithHttpInfo($rate_source, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storesGetStoreRateConfigurationAsyncWithHttpInfo
     *
     * Get store rate settings for the specified rate source
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storesGetStoreRateConfigurationAsyncWithHttpInfo($rate_source, $store_id, string $contentType = self::contentTypes['storesGetStoreRateConfiguration'][0])
    {
        $returnType = '\OpenAPI\Client\Model\StoreRateConfiguration';
        $request = $this->storesGetStoreRateConfigurationRequest($rate_source, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storesGetStoreRateConfiguration'
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storesGetStoreRateConfigurationRequest($rate_source, $store_id, string $contentType = self::contentTypes['storesGetStoreRateConfiguration'][0])
    {

        // verify the required parameter 'rate_source' is set
        if ($rate_source === null || (is_array($rate_source) && count($rate_source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_source when calling storesGetStoreRateConfiguration'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storesGetStoreRateConfiguration'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/rates/configuration/{rateSource}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rate_source !== null) {
            $resourcePath = str_replace(
                '{' . 'rateSource' . '}',
                ObjectSerializer::toPathValue($rate_source),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storesGetStoreRates
     *
     * Get rates
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $currency_pair The currency pairs to fetch rates for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRates'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StoreRateResult[]|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function storesGetStoreRates($store_id, $currency_pair = null, string $contentType = self::contentTypes['storesGetStoreRates'][0])
    {
        list($response) = $this->storesGetStoreRatesWithHttpInfo($store_id, $currency_pair, $contentType);
        return $response;
    }

    /**
     * Operation storesGetStoreRatesWithHttpInfo
     *
     * Get rates
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $currency_pair The currency pairs to fetch rates for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRates'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StoreRateResult[]|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function storesGetStoreRatesWithHttpInfo($store_id, $currency_pair = null, string $contentType = self::contentTypes['storesGetStoreRates'][0])
    {
        $request = $this->storesGetStoreRatesRequest($store_id, $currency_pair, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\StoreRateResult[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\StoreRateResult[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StoreRateResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storesGetStoreRatesAsync
     *
     * Get rates
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $currency_pair The currency pairs to fetch rates for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storesGetStoreRatesAsync($store_id, $currency_pair = null, string $contentType = self::contentTypes['storesGetStoreRates'][0])
    {
        return $this->storesGetStoreRatesAsyncWithHttpInfo($store_id, $currency_pair, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storesGetStoreRatesAsyncWithHttpInfo
     *
     * Get rates
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $currency_pair The currency pairs to fetch rates for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storesGetStoreRatesAsyncWithHttpInfo($store_id, $currency_pair = null, string $contentType = self::contentTypes['storesGetStoreRates'][0])
    {
        $returnType = '\OpenAPI\Client\Model\StoreRateResult[]';
        $request = $this->storesGetStoreRatesRequest($store_id, $currency_pair, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storesGetStoreRates'
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $currency_pair The currency pairs to fetch rates for (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesGetStoreRates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storesGetStoreRatesRequest($store_id, $currency_pair = null, string $contentType = self::contentTypes['storesGetStoreRates'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storesGetStoreRates'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency_pair,
            'currencyPair', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storesPreviewStoreRateConfiguration
     *
     * Preview rate configuration results
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration store_rate_configuration (required)
     * @param  string[]|null $currency_pair The currency pairs to preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesPreviewStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StoreRateResult[]|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function storesPreviewStoreRateConfiguration($store_id, $store_rate_configuration, $currency_pair = null, string $contentType = self::contentTypes['storesPreviewStoreRateConfiguration'][0])
    {
        list($response) = $this->storesPreviewStoreRateConfigurationWithHttpInfo($store_id, $store_rate_configuration, $currency_pair, $contentType);
        return $response;
    }

    /**
     * Operation storesPreviewStoreRateConfigurationWithHttpInfo
     *
     * Preview rate configuration results
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration (required)
     * @param  string[]|null $currency_pair The currency pairs to preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesPreviewStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StoreRateResult[]|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function storesPreviewStoreRateConfigurationWithHttpInfo($store_id, $store_rate_configuration, $currency_pair = null, string $contentType = self::contentTypes['storesPreviewStoreRateConfiguration'][0])
    {
        $request = $this->storesPreviewStoreRateConfigurationRequest($store_id, $store_rate_configuration, $currency_pair, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\StoreRateResult[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\StoreRateResult[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StoreRateResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storesPreviewStoreRateConfigurationAsync
     *
     * Preview rate configuration results
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration (required)
     * @param  string[]|null $currency_pair The currency pairs to preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesPreviewStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storesPreviewStoreRateConfigurationAsync($store_id, $store_rate_configuration, $currency_pair = null, string $contentType = self::contentTypes['storesPreviewStoreRateConfiguration'][0])
    {
        return $this->storesPreviewStoreRateConfigurationAsyncWithHttpInfo($store_id, $store_rate_configuration, $currency_pair, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storesPreviewStoreRateConfigurationAsyncWithHttpInfo
     *
     * Preview rate configuration results
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration (required)
     * @param  string[]|null $currency_pair The currency pairs to preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesPreviewStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storesPreviewStoreRateConfigurationAsyncWithHttpInfo($store_id, $store_rate_configuration, $currency_pair = null, string $contentType = self::contentTypes['storesPreviewStoreRateConfiguration'][0])
    {
        $returnType = '\OpenAPI\Client\Model\StoreRateResult[]';
        $request = $this->storesPreviewStoreRateConfigurationRequest($store_id, $store_rate_configuration, $currency_pair, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storesPreviewStoreRateConfiguration'
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration (required)
     * @param  string[]|null $currency_pair The currency pairs to preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesPreviewStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storesPreviewStoreRateConfigurationRequest($store_id, $store_rate_configuration, $currency_pair = null, string $contentType = self::contentTypes['storesPreviewStoreRateConfiguration'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storesPreviewStoreRateConfiguration'
            );
        }

        // verify the required parameter 'store_rate_configuration' is set
        if ($store_rate_configuration === null || (is_array($store_rate_configuration) && count($store_rate_configuration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_rate_configuration when calling storesPreviewStoreRateConfiguration'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/rates/configuration/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currency_pair,
            'currencyPair', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($store_rate_configuration)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($store_rate_configuration));
            } else {
                $httpBody = $store_rate_configuration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storesUpdateStoreRateConfiguration
     *
     * Get store rate settings for the specified rate source
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration store_rate_configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesUpdateStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\StoreRateConfiguration|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function storesUpdateStoreRateConfiguration($rate_source, $store_id, $store_rate_configuration, string $contentType = self::contentTypes['storesUpdateStoreRateConfiguration'][0])
    {
        list($response) = $this->storesUpdateStoreRateConfigurationWithHttpInfo($rate_source, $store_id, $store_rate_configuration, $contentType);
        return $response;
    }

    /**
     * Operation storesUpdateStoreRateConfigurationWithHttpInfo
     *
     * Get store rate settings for the specified rate source
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesUpdateStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\StoreRateConfiguration|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function storesUpdateStoreRateConfigurationWithHttpInfo($rate_source, $store_id, $store_rate_configuration, string $contentType = self::contentTypes['storesUpdateStoreRateConfiguration'][0])
    {
        $request = $this->storesUpdateStoreRateConfigurationRequest($rate_source, $store_id, $store_rate_configuration, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\StoreRateConfiguration',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\StoreRateConfiguration',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\StoreRateConfiguration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storesUpdateStoreRateConfigurationAsync
     *
     * Get store rate settings for the specified rate source
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesUpdateStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storesUpdateStoreRateConfigurationAsync($rate_source, $store_id, $store_rate_configuration, string $contentType = self::contentTypes['storesUpdateStoreRateConfiguration'][0])
    {
        return $this->storesUpdateStoreRateConfigurationAsyncWithHttpInfo($rate_source, $store_id, $store_rate_configuration, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storesUpdateStoreRateConfigurationAsyncWithHttpInfo
     *
     * Get store rate settings for the specified rate source
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesUpdateStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storesUpdateStoreRateConfigurationAsyncWithHttpInfo($rate_source, $store_id, $store_rate_configuration, string $contentType = self::contentTypes['storesUpdateStoreRateConfiguration'][0])
    {
        $returnType = '\OpenAPI\Client\Model\StoreRateConfiguration';
        $request = $this->storesUpdateStoreRateConfigurationRequest($rate_source, $store_id, $store_rate_configuration, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storesUpdateStoreRateConfiguration'
     *
     * @param  string $rate_source The rate source to configure (&#x60;primary&#x60; or &#x60;fallback&#x60;) (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\StoreRateConfiguration $store_rate_configuration (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storesUpdateStoreRateConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storesUpdateStoreRateConfigurationRequest($rate_source, $store_id, $store_rate_configuration, string $contentType = self::contentTypes['storesUpdateStoreRateConfiguration'][0])
    {

        // verify the required parameter 'rate_source' is set
        if ($rate_source === null || (is_array($rate_source) && count($rate_source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_source when calling storesUpdateStoreRateConfiguration'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storesUpdateStoreRateConfiguration'
            );
        }

        // verify the required parameter 'store_rate_configuration' is set
        if ($store_rate_configuration === null || (is_array($store_rate_configuration) && count($store_rate_configuration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_rate_configuration when calling storesUpdateStoreRateConfiguration'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/rates/configuration/{rateSource}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rate_source !== null) {
            $resourcePath = str_replace(
                '{' . 'rateSource' . '}',
                ObjectSerializer::toPathValue($rate_source),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($store_rate_configuration)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($store_rate_configuration));
            } else {
                $httpBody = $store_rate_configuration;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
