<?php
/**
 * WebhooksApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebhooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'webhooksCreateWebhook' => [
            'application/json',
        ],
        'webhooksDeleteWebhook' => [
            'application/json',
        ],
        'webhooksGetWebhook' => [
            'application/json',
        ],
        'webhooksGetWebhookDeliveries' => [
            'application/json',
        ],
        'webhooksGetWebhookDelivery' => [
            'application/json',
        ],
        'webhooksGetWebhookDeliveryRequests' => [
            'application/json',
        ],
        'webhooksGetWebhooks' => [
            'application/json',
        ],
        'webhooksRedeliverWebhookDelivery' => [
            'application/json',
        ],
        'webhooksUpdateWebhook' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation webhooksCreateWebhook
     *
     * Create a new webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\WebhookDataCreate $webhook_data_create webhook_data_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksCreateWebhook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebhookDataCreateResult|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function webhooksCreateWebhook($store_id, $webhook_data_create, string $contentType = self::contentTypes['webhooksCreateWebhook'][0])
    {
        list($response) = $this->webhooksCreateWebhookWithHttpInfo($store_id, $webhook_data_create, $contentType);
        return $response;
    }

    /**
     * Operation webhooksCreateWebhookWithHttpInfo
     *
     * Create a new webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\WebhookDataCreate $webhook_data_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksCreateWebhook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebhookDataCreateResult|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksCreateWebhookWithHttpInfo($store_id, $webhook_data_create, string $contentType = self::contentTypes['webhooksCreateWebhook'][0])
    {
        $request = $this->webhooksCreateWebhookRequest($store_id, $webhook_data_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\WebhookDataCreateResult',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\WebhookDataCreateResult',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WebhookDataCreateResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksCreateWebhookAsync
     *
     * Create a new webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\WebhookDataCreate $webhook_data_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksCreateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksCreateWebhookAsync($store_id, $webhook_data_create, string $contentType = self::contentTypes['webhooksCreateWebhook'][0])
    {
        return $this->webhooksCreateWebhookAsyncWithHttpInfo($store_id, $webhook_data_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksCreateWebhookAsyncWithHttpInfo
     *
     * Create a new webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\WebhookDataCreate $webhook_data_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksCreateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksCreateWebhookAsyncWithHttpInfo($store_id, $webhook_data_create, string $contentType = self::contentTypes['webhooksCreateWebhook'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WebhookDataCreateResult';
        $request = $this->webhooksCreateWebhookRequest($store_id, $webhook_data_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksCreateWebhook'
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\WebhookDataCreate $webhook_data_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksCreateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksCreateWebhookRequest($store_id, $webhook_data_create, string $contentType = self::contentTypes['webhooksCreateWebhook'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksCreateWebhook'
            );
        }

        // verify the required parameter 'webhook_data_create' is set
        if ($webhook_data_create === null || (is_array($webhook_data_create) && count($webhook_data_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_data_create when calling webhooksCreateWebhook'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($webhook_data_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($webhook_data_create));
            } else {
                $httpBody = $webhook_data_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksDeleteWebhook
     *
     * Delete a webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function webhooksDeleteWebhook($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksDeleteWebhook'][0])
    {
        $this->webhooksDeleteWebhookWithHttpInfo($store_id, $webhook_id, $contentType);
    }

    /**
     * Operation webhooksDeleteWebhookWithHttpInfo
     *
     * Delete a webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksDeleteWebhookWithHttpInfo($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksDeleteWebhook'][0])
    {
        $request = $this->webhooksDeleteWebhookRequest($store_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksDeleteWebhookAsync
     *
     * Delete a webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksDeleteWebhookAsync($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksDeleteWebhook'][0])
    {
        return $this->webhooksDeleteWebhookAsyncWithHttpInfo($store_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksDeleteWebhookAsyncWithHttpInfo
     *
     * Delete a webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksDeleteWebhookAsyncWithHttpInfo($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksDeleteWebhook'][0])
    {
        $returnType = '';
        $request = $this->webhooksDeleteWebhookRequest($store_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksDeleteWebhook'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksDeleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksDeleteWebhookRequest($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksDeleteWebhook'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksDeleteWebhook'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling webhooksDeleteWebhook'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/webhooks/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksGetWebhook
     *
     * Get a webhook of a store
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebhookData
     */
    public function webhooksGetWebhook($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhook'][0])
    {
        list($response) = $this->webhooksGetWebhookWithHttpInfo($store_id, $webhook_id, $contentType);
        return $response;
    }

    /**
     * Operation webhooksGetWebhookWithHttpInfo
     *
     * Get a webhook of a store
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebhookData, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksGetWebhookWithHttpInfo($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhook'][0])
    {
        $request = $this->webhooksGetWebhookRequest($store_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\WebhookData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\WebhookData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WebhookData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksGetWebhookAsync
     *
     * Get a webhook of a store
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhookAsync($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhook'][0])
    {
        return $this->webhooksGetWebhookAsyncWithHttpInfo($store_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksGetWebhookAsyncWithHttpInfo
     *
     * Get a webhook of a store
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhookAsyncWithHttpInfo($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhook'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WebhookData';
        $request = $this->webhooksGetWebhookRequest($store_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksGetWebhook'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksGetWebhookRequest($store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhook'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksGetWebhook'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling webhooksGetWebhook'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/webhooks/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksGetWebhookDeliveries
     *
     * Get latest deliveries
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string|null $count The number of latest deliveries to fetch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveries'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebhookDeliveryData[]
     */
    public function webhooksGetWebhookDeliveries($store_id, $webhook_id, $count = null, string $contentType = self::contentTypes['webhooksGetWebhookDeliveries'][0])
    {
        list($response) = $this->webhooksGetWebhookDeliveriesWithHttpInfo($store_id, $webhook_id, $count, $contentType);
        return $response;
    }

    /**
     * Operation webhooksGetWebhookDeliveriesWithHttpInfo
     *
     * Get latest deliveries
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string|null $count The number of latest deliveries to fetch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveries'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebhookDeliveryData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksGetWebhookDeliveriesWithHttpInfo($store_id, $webhook_id, $count = null, string $contentType = self::contentTypes['webhooksGetWebhookDeliveries'][0])
    {
        $request = $this->webhooksGetWebhookDeliveriesRequest($store_id, $webhook_id, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\WebhookDeliveryData[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\WebhookDeliveryData[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WebhookDeliveryData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksGetWebhookDeliveriesAsync
     *
     * Get latest deliveries
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string|null $count The number of latest deliveries to fetch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhookDeliveriesAsync($store_id, $webhook_id, $count = null, string $contentType = self::contentTypes['webhooksGetWebhookDeliveries'][0])
    {
        return $this->webhooksGetWebhookDeliveriesAsyncWithHttpInfo($store_id, $webhook_id, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksGetWebhookDeliveriesAsyncWithHttpInfo
     *
     * Get latest deliveries
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string|null $count The number of latest deliveries to fetch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhookDeliveriesAsyncWithHttpInfo($store_id, $webhook_id, $count = null, string $contentType = self::contentTypes['webhooksGetWebhookDeliveries'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WebhookDeliveryData[]';
        $request = $this->webhooksGetWebhookDeliveriesRequest($store_id, $webhook_id, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksGetWebhookDeliveries'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string|null $count The number of latest deliveries to fetch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksGetWebhookDeliveriesRequest($store_id, $webhook_id, $count = null, string $contentType = self::contentTypes['webhooksGetWebhookDeliveries'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksGetWebhookDeliveries'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling webhooksGetWebhookDeliveries'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/webhooks/{webhookId}/deliveries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksGetWebhookDelivery
     *
     * Get a webhook delivery
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebhookDeliveryData
     */
    public function webhooksGetWebhookDelivery($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDelivery'][0])
    {
        list($response) = $this->webhooksGetWebhookDeliveryWithHttpInfo($delivery_id, $store_id, $webhook_id, $contentType);
        return $response;
    }

    /**
     * Operation webhooksGetWebhookDeliveryWithHttpInfo
     *
     * Get a webhook delivery
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebhookDeliveryData, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksGetWebhookDeliveryWithHttpInfo($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDelivery'][0])
    {
        $request = $this->webhooksGetWebhookDeliveryRequest($delivery_id, $store_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\WebhookDeliveryData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\WebhookDeliveryData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WebhookDeliveryData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksGetWebhookDeliveryAsync
     *
     * Get a webhook delivery
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhookDeliveryAsync($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDelivery'][0])
    {
        return $this->webhooksGetWebhookDeliveryAsyncWithHttpInfo($delivery_id, $store_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksGetWebhookDeliveryAsyncWithHttpInfo
     *
     * Get a webhook delivery
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhookDeliveryAsyncWithHttpInfo($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDelivery'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WebhookDeliveryData';
        $request = $this->webhooksGetWebhookDeliveryRequest($delivery_id, $store_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksGetWebhookDelivery'
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksGetWebhookDeliveryRequest($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDelivery'][0])
    {

        // verify the required parameter 'delivery_id' is set
        if ($delivery_id === null || (is_array($delivery_id) && count($delivery_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_id when calling webhooksGetWebhookDelivery'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksGetWebhookDelivery'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling webhooksGetWebhookDelivery'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/webhooks/{webhookId}/deliveries/{deliveryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryId' . '}',
                ObjectSerializer::toPathValue($delivery_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksGetWebhookDeliveryRequests
     *
     * Get the delivery&#39;s request
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveryRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,mixed>
     */
    public function webhooksGetWebhookDeliveryRequests($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDeliveryRequests'][0])
    {
        list($response) = $this->webhooksGetWebhookDeliveryRequestsWithHttpInfo($delivery_id, $store_id, $webhook_id, $contentType);
        return $response;
    }

    /**
     * Operation webhooksGetWebhookDeliveryRequestsWithHttpInfo
     *
     * Get the delivery&#39;s request
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveryRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,mixed>, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksGetWebhookDeliveryRequestsWithHttpInfo($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDeliveryRequests'][0])
    {
        $request = $this->webhooksGetWebhookDeliveryRequestsRequest($delivery_id, $store_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,mixed>',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,mixed>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,mixed>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksGetWebhookDeliveryRequestsAsync
     *
     * Get the delivery&#39;s request
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveryRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhookDeliveryRequestsAsync($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDeliveryRequests'][0])
    {
        return $this->webhooksGetWebhookDeliveryRequestsAsyncWithHttpInfo($delivery_id, $store_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksGetWebhookDeliveryRequestsAsyncWithHttpInfo
     *
     * Get the delivery&#39;s request
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveryRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhookDeliveryRequestsAsyncWithHttpInfo($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDeliveryRequests'][0])
    {
        $returnType = 'array<string,mixed>';
        $request = $this->webhooksGetWebhookDeliveryRequestsRequest($delivery_id, $store_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksGetWebhookDeliveryRequests'
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhookDeliveryRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksGetWebhookDeliveryRequestsRequest($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksGetWebhookDeliveryRequests'][0])
    {

        // verify the required parameter 'delivery_id' is set
        if ($delivery_id === null || (is_array($delivery_id) && count($delivery_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_id when calling webhooksGetWebhookDeliveryRequests'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksGetWebhookDeliveryRequests'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling webhooksGetWebhookDeliveryRequests'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/webhooks/{webhookId}/deliveries/{deliveryId}/request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryId' . '}',
                ObjectSerializer::toPathValue($delivery_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksGetWebhooks
     *
     * Get webhooks of a store
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhooks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebhookData[]
     */
    public function webhooksGetWebhooks($store_id, string $contentType = self::contentTypes['webhooksGetWebhooks'][0])
    {
        list($response) = $this->webhooksGetWebhooksWithHttpInfo($store_id, $contentType);
        return $response;
    }

    /**
     * Operation webhooksGetWebhooksWithHttpInfo
     *
     * Get webhooks of a store
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhooks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebhookData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksGetWebhooksWithHttpInfo($store_id, string $contentType = self::contentTypes['webhooksGetWebhooks'][0])
    {
        $request = $this->webhooksGetWebhooksRequest($store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\WebhookData[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\WebhookData[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WebhookData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksGetWebhooksAsync
     *
     * Get webhooks of a store
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhooksAsync($store_id, string $contentType = self::contentTypes['webhooksGetWebhooks'][0])
    {
        return $this->webhooksGetWebhooksAsyncWithHttpInfo($store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksGetWebhooksAsyncWithHttpInfo
     *
     * Get webhooks of a store
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksGetWebhooksAsyncWithHttpInfo($store_id, string $contentType = self::contentTypes['webhooksGetWebhooks'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WebhookData[]';
        $request = $this->webhooksGetWebhooksRequest($store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksGetWebhooks'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksGetWebhooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksGetWebhooksRequest($store_id, string $contentType = self::contentTypes['webhooksGetWebhooks'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksGetWebhooks'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksRedeliverWebhookDelivery
     *
     * Redeliver the delivery
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksRedeliverWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string
     */
    public function webhooksRedeliverWebhookDelivery($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksRedeliverWebhookDelivery'][0])
    {
        list($response) = $this->webhooksRedeliverWebhookDeliveryWithHttpInfo($delivery_id, $store_id, $webhook_id, $contentType);
        return $response;
    }

    /**
     * Operation webhooksRedeliverWebhookDeliveryWithHttpInfo
     *
     * Redeliver the delivery
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksRedeliverWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksRedeliverWebhookDeliveryWithHttpInfo($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksRedeliverWebhookDelivery'][0])
    {
        $request = $this->webhooksRedeliverWebhookDeliveryRequest($delivery_id, $store_id, $webhook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksRedeliverWebhookDeliveryAsync
     *
     * Redeliver the delivery
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksRedeliverWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksRedeliverWebhookDeliveryAsync($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksRedeliverWebhookDelivery'][0])
    {
        return $this->webhooksRedeliverWebhookDeliveryAsyncWithHttpInfo($delivery_id, $store_id, $webhook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksRedeliverWebhookDeliveryAsyncWithHttpInfo
     *
     * Redeliver the delivery
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksRedeliverWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksRedeliverWebhookDeliveryAsyncWithHttpInfo($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksRedeliverWebhookDelivery'][0])
    {
        $returnType = 'string';
        $request = $this->webhooksRedeliverWebhookDeliveryRequest($delivery_id, $store_id, $webhook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksRedeliverWebhookDelivery'
     *
     * @param  string $delivery_id The id of the delivery (required)
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksRedeliverWebhookDelivery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksRedeliverWebhookDeliveryRequest($delivery_id, $store_id, $webhook_id, string $contentType = self::contentTypes['webhooksRedeliverWebhookDelivery'][0])
    {

        // verify the required parameter 'delivery_id' is set
        if ($delivery_id === null || (is_array($delivery_id) && count($delivery_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_id when calling webhooksRedeliverWebhookDelivery'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksRedeliverWebhookDelivery'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling webhooksRedeliverWebhookDelivery'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/webhooks/{webhookId}/deliveries/{deliveryId}/redeliver';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($delivery_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryId' . '}',
                ObjectSerializer::toPathValue($delivery_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksUpdateWebhook
     *
     * Update a webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  \OpenAPI\Client\Model\WebhookDataUpdate $webhook_data_update webhook_data_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebhookData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function webhooksUpdateWebhook($store_id, $webhook_id, $webhook_data_update, string $contentType = self::contentTypes['webhooksUpdateWebhook'][0])
    {
        list($response) = $this->webhooksUpdateWebhookWithHttpInfo($store_id, $webhook_id, $webhook_data_update, $contentType);
        return $response;
    }

    /**
     * Operation webhooksUpdateWebhookWithHttpInfo
     *
     * Update a webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  \OpenAPI\Client\Model\WebhookDataUpdate $webhook_data_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebhookData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksUpdateWebhookWithHttpInfo($store_id, $webhook_id, $webhook_data_update, string $contentType = self::contentTypes['webhooksUpdateWebhook'][0])
    {
        $request = $this->webhooksUpdateWebhookRequest($store_id, $webhook_id, $webhook_data_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\WebhookData',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\WebhookData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\WebhookData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation webhooksUpdateWebhookAsync
     *
     * Update a webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  \OpenAPI\Client\Model\WebhookDataUpdate $webhook_data_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksUpdateWebhookAsync($store_id, $webhook_id, $webhook_data_update, string $contentType = self::contentTypes['webhooksUpdateWebhook'][0])
    {
        return $this->webhooksUpdateWebhookAsyncWithHttpInfo($store_id, $webhook_id, $webhook_data_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksUpdateWebhookAsyncWithHttpInfo
     *
     * Update a webhook
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  \OpenAPI\Client\Model\WebhookDataUpdate $webhook_data_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksUpdateWebhookAsyncWithHttpInfo($store_id, $webhook_id, $webhook_data_update, string $contentType = self::contentTypes['webhooksUpdateWebhook'][0])
    {
        $returnType = '\OpenAPI\Client\Model\WebhookData';
        $request = $this->webhooksUpdateWebhookRequest($store_id, $webhook_id, $webhook_data_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksUpdateWebhook'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $webhook_id The webhook id (required)
     * @param  \OpenAPI\Client\Model\WebhookDataUpdate $webhook_data_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['webhooksUpdateWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function webhooksUpdateWebhookRequest($store_id, $webhook_id, $webhook_data_update, string $contentType = self::contentTypes['webhooksUpdateWebhook'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling webhooksUpdateWebhook'
            );
        }

        // verify the required parameter 'webhook_id' is set
        if ($webhook_id === null || (is_array($webhook_id) && count($webhook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_id when calling webhooksUpdateWebhook'
            );
        }

        // verify the required parameter 'webhook_data_update' is set
        if ($webhook_data_update === null || (is_array($webhook_data_update) && count($webhook_data_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_data_update when calling webhooksUpdateWebhook'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/webhooks/{webhookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($webhook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webhookId' . '}',
                ObjectSerializer::toPathValue($webhook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($webhook_data_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($webhook_data_update));
            } else {
                $httpBody = $webhook_data_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
