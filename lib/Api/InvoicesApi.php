<?php
/**
 * InvoicesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * InvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'invoicesActivatePaymentMethod' => [
            'application/json',
        ],
        'invoicesArchiveInvoice' => [
            'application/json',
        ],
        'invoicesCreateInvoice' => [
            'application/json',
        ],
        'invoicesGetInvoice' => [
            'application/json',
        ],
        'invoicesGetInvoicePaymentMethods' => [
            'application/json',
        ],
        'invoicesGetInvoiceRefundTriggerData' => [
            'application/json',
        ],
        'invoicesGetInvoices' => [
            'application/json',
        ],
        'invoicesMarkInvoiceStatus' => [
            'application/json',
        ],
        'invoicesRefund' => [
            'application/json',
        ],
        'invoicesUnarchiveInvoice' => [
            'application/json',
        ],
        'invoicesUpdateInvoice' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation invoicesActivatePaymentMethod
     *
     * Activate Payment Method
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesActivatePaymentMethod'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function invoicesActivatePaymentMethod($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesActivatePaymentMethod'][0])
    {
        $this->invoicesActivatePaymentMethodWithHttpInfo($invoice_id, $payment_method_id, $store_id, $contentType);
    }

    /**
     * Operation invoicesActivatePaymentMethodWithHttpInfo
     *
     * Activate Payment Method
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesActivatePaymentMethod'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesActivatePaymentMethodWithHttpInfo($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesActivatePaymentMethod'][0])
    {
        $request = $this->invoicesActivatePaymentMethodRequest($invoice_id, $payment_method_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesActivatePaymentMethodAsync
     *
     * Activate Payment Method
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesActivatePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesActivatePaymentMethodAsync($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesActivatePaymentMethod'][0])
    {
        return $this->invoicesActivatePaymentMethodAsyncWithHttpInfo($invoice_id, $payment_method_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesActivatePaymentMethodAsyncWithHttpInfo
     *
     * Activate Payment Method
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesActivatePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesActivatePaymentMethodAsyncWithHttpInfo($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesActivatePaymentMethod'][0])
    {
        $returnType = '';
        $request = $this->invoicesActivatePaymentMethodRequest($invoice_id, $payment_method_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesActivatePaymentMethod'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesActivatePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesActivatePaymentMethodRequest($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesActivatePaymentMethod'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesActivatePaymentMethod'
            );
        }

        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling invoicesActivatePaymentMethod'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesActivatePaymentMethod'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}/payment-methods/{paymentMethodId}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesArchiveInvoice
     *
     * Archive invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesArchiveInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function invoicesArchiveInvoice($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesArchiveInvoice'][0])
    {
        $this->invoicesArchiveInvoiceWithHttpInfo($invoice_id, $store_id, $contentType);
    }

    /**
     * Operation invoicesArchiveInvoiceWithHttpInfo
     *
     * Archive invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesArchiveInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesArchiveInvoiceWithHttpInfo($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesArchiveInvoice'][0])
    {
        $request = $this->invoicesArchiveInvoiceRequest($invoice_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesArchiveInvoiceAsync
     *
     * Archive invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesArchiveInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesArchiveInvoiceAsync($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesArchiveInvoice'][0])
    {
        return $this->invoicesArchiveInvoiceAsyncWithHttpInfo($invoice_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesArchiveInvoiceAsyncWithHttpInfo
     *
     * Archive invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesArchiveInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesArchiveInvoiceAsyncWithHttpInfo($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesArchiveInvoice'][0])
    {
        $returnType = '';
        $request = $this->invoicesArchiveInvoiceRequest($invoice_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesArchiveInvoice'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesArchiveInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesArchiveInvoiceRequest($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesArchiveInvoice'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesArchiveInvoice'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesArchiveInvoice'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesCreateInvoice
     *
     * Create a new invoice
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreateInvoiceRequest $create_invoice_request create_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesCreateInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function invoicesCreateInvoice($store_id, $create_invoice_request, string $contentType = self::contentTypes['invoicesCreateInvoice'][0])
    {
        list($response) = $this->invoicesCreateInvoiceWithHttpInfo($store_id, $create_invoice_request, $contentType);
        return $response;
    }

    /**
     * Operation invoicesCreateInvoiceWithHttpInfo
     *
     * Create a new invoice
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreateInvoiceRequest $create_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesCreateInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesCreateInvoiceWithHttpInfo($store_id, $create_invoice_request, string $contentType = self::contentTypes['invoicesCreateInvoice'][0])
    {
        $request = $this->invoicesCreateInvoiceRequest($store_id, $create_invoice_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceData',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesCreateInvoiceAsync
     *
     * Create a new invoice
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreateInvoiceRequest $create_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesCreateInvoiceAsync($store_id, $create_invoice_request, string $contentType = self::contentTypes['invoicesCreateInvoice'][0])
    {
        return $this->invoicesCreateInvoiceAsyncWithHttpInfo($store_id, $create_invoice_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesCreateInvoiceAsyncWithHttpInfo
     *
     * Create a new invoice
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreateInvoiceRequest $create_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesCreateInvoiceAsyncWithHttpInfo($store_id, $create_invoice_request, string $contentType = self::contentTypes['invoicesCreateInvoice'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceData';
        $request = $this->invoicesCreateInvoiceRequest($store_id, $create_invoice_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesCreateInvoice'
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreateInvoiceRequest $create_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesCreateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesCreateInvoiceRequest($store_id, $create_invoice_request, string $contentType = self::contentTypes['invoicesCreateInvoice'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesCreateInvoice'
            );
        }

        // verify the required parameter 'create_invoice_request' is set
        if ($create_invoice_request === null || (is_array($create_invoice_request) && count($create_invoice_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_invoice_request when calling invoicesCreateInvoice'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_invoice_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_invoice_request));
            } else {
                $httpBody = $create_invoice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesGetInvoice
     *
     * Get invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceData
     */
    public function invoicesGetInvoice($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoice'][0])
    {
        list($response) = $this->invoicesGetInvoiceWithHttpInfo($invoice_id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation invoicesGetInvoiceWithHttpInfo
     *
     * Get invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceData, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesGetInvoiceWithHttpInfo($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoice'][0])
    {
        $request = $this->invoicesGetInvoiceRequest($invoice_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesGetInvoiceAsync
     *
     * Get invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetInvoiceAsync($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoice'][0])
    {
        return $this->invoicesGetInvoiceAsyncWithHttpInfo($invoice_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesGetInvoiceAsyncWithHttpInfo
     *
     * Get invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetInvoiceAsyncWithHttpInfo($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoice'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceData';
        $request = $this->invoicesGetInvoiceRequest($invoice_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesGetInvoice'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesGetInvoiceRequest($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoice'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesGetInvoice'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesGetInvoice'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesGetInvoicePaymentMethods
     *
     * Get invoice payment methods
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_sensitive If &#x60;true&#x60;, &#x60;additionalData&#x60; might include sensitive data (such as xpub). Requires the permission &#x60;btcpay.store.canmodifystoresettings&#x60;. (optional, default to false)
     * @param  bool|null $only_accounted_payments If default or true, only returns payments which are accounted (in Bitcoin, this mean not returning RBF&#39;d or double spent payments) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoicePaymentMethods'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoicePaymentMethodDataModel[]
     */
    public function invoicesGetInvoicePaymentMethods($invoice_id, $store_id, $include_sensitive = false, $only_accounted_payments = true, string $contentType = self::contentTypes['invoicesGetInvoicePaymentMethods'][0])
    {
        list($response) = $this->invoicesGetInvoicePaymentMethodsWithHttpInfo($invoice_id, $store_id, $include_sensitive, $only_accounted_payments, $contentType);
        return $response;
    }

    /**
     * Operation invoicesGetInvoicePaymentMethodsWithHttpInfo
     *
     * Get invoice payment methods
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_sensitive If &#x60;true&#x60;, &#x60;additionalData&#x60; might include sensitive data (such as xpub). Requires the permission &#x60;btcpay.store.canmodifystoresettings&#x60;. (optional, default to false)
     * @param  bool|null $only_accounted_payments If default or true, only returns payments which are accounted (in Bitcoin, this mean not returning RBF&#39;d or double spent payments) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoicePaymentMethods'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoicePaymentMethodDataModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesGetInvoicePaymentMethodsWithHttpInfo($invoice_id, $store_id, $include_sensitive = false, $only_accounted_payments = true, string $contentType = self::contentTypes['invoicesGetInvoicePaymentMethods'][0])
    {
        $request = $this->invoicesGetInvoicePaymentMethodsRequest($invoice_id, $store_id, $include_sensitive, $only_accounted_payments, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoicePaymentMethodDataModel[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoicePaymentMethodDataModel[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoicePaymentMethodDataModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesGetInvoicePaymentMethodsAsync
     *
     * Get invoice payment methods
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_sensitive If &#x60;true&#x60;, &#x60;additionalData&#x60; might include sensitive data (such as xpub). Requires the permission &#x60;btcpay.store.canmodifystoresettings&#x60;. (optional, default to false)
     * @param  bool|null $only_accounted_payments If default or true, only returns payments which are accounted (in Bitcoin, this mean not returning RBF&#39;d or double spent payments) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoicePaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetInvoicePaymentMethodsAsync($invoice_id, $store_id, $include_sensitive = false, $only_accounted_payments = true, string $contentType = self::contentTypes['invoicesGetInvoicePaymentMethods'][0])
    {
        return $this->invoicesGetInvoicePaymentMethodsAsyncWithHttpInfo($invoice_id, $store_id, $include_sensitive, $only_accounted_payments, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesGetInvoicePaymentMethodsAsyncWithHttpInfo
     *
     * Get invoice payment methods
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_sensitive If &#x60;true&#x60;, &#x60;additionalData&#x60; might include sensitive data (such as xpub). Requires the permission &#x60;btcpay.store.canmodifystoresettings&#x60;. (optional, default to false)
     * @param  bool|null $only_accounted_payments If default or true, only returns payments which are accounted (in Bitcoin, this mean not returning RBF&#39;d or double spent payments) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoicePaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetInvoicePaymentMethodsAsyncWithHttpInfo($invoice_id, $store_id, $include_sensitive = false, $only_accounted_payments = true, string $contentType = self::contentTypes['invoicesGetInvoicePaymentMethods'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoicePaymentMethodDataModel[]';
        $request = $this->invoicesGetInvoicePaymentMethodsRequest($invoice_id, $store_id, $include_sensitive, $only_accounted_payments, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesGetInvoicePaymentMethods'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_sensitive If &#x60;true&#x60;, &#x60;additionalData&#x60; might include sensitive data (such as xpub). Requires the permission &#x60;btcpay.store.canmodifystoresettings&#x60;. (optional, default to false)
     * @param  bool|null $only_accounted_payments If default or true, only returns payments which are accounted (in Bitcoin, this mean not returning RBF&#39;d or double spent payments) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoicePaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesGetInvoicePaymentMethodsRequest($invoice_id, $store_id, $include_sensitive = false, $only_accounted_payments = true, string $contentType = self::contentTypes['invoicesGetInvoicePaymentMethods'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesGetInvoicePaymentMethods'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesGetInvoicePaymentMethods'
            );
        }




        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}/payment-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_sensitive,
            'includeSensitive', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_accounted_payments,
            'onlyAccountedPayments', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesGetInvoiceRefundTriggerData
     *
     * Get invoice refund trigger data
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoiceRefundTriggerData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceRefundTriggerData
     */
    public function invoicesGetInvoiceRefundTriggerData($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoiceRefundTriggerData'][0])
    {
        list($response) = $this->invoicesGetInvoiceRefundTriggerDataWithHttpInfo($invoice_id, $payment_method_id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation invoicesGetInvoiceRefundTriggerDataWithHttpInfo
     *
     * Get invoice refund trigger data
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoiceRefundTriggerData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceRefundTriggerData, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesGetInvoiceRefundTriggerDataWithHttpInfo($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoiceRefundTriggerData'][0])
    {
        $request = $this->invoicesGetInvoiceRefundTriggerDataRequest($invoice_id, $payment_method_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceRefundTriggerData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceRefundTriggerData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceRefundTriggerData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesGetInvoiceRefundTriggerDataAsync
     *
     * Get invoice refund trigger data
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoiceRefundTriggerData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetInvoiceRefundTriggerDataAsync($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoiceRefundTriggerData'][0])
    {
        return $this->invoicesGetInvoiceRefundTriggerDataAsyncWithHttpInfo($invoice_id, $payment_method_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesGetInvoiceRefundTriggerDataAsyncWithHttpInfo
     *
     * Get invoice refund trigger data
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoiceRefundTriggerData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetInvoiceRefundTriggerDataAsyncWithHttpInfo($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoiceRefundTriggerData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceRefundTriggerData';
        $request = $this->invoicesGetInvoiceRefundTriggerDataRequest($invoice_id, $payment_method_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesGetInvoiceRefundTriggerData'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoiceRefundTriggerData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesGetInvoiceRefundTriggerDataRequest($invoice_id, $payment_method_id, $store_id, string $contentType = self::contentTypes['invoicesGetInvoiceRefundTriggerData'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesGetInvoiceRefundTriggerData'
            );
        }

        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling invoicesGetInvoiceRefundTriggerData'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesGetInvoiceRefundTriggerData'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}/refund/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesGetInvoices
     *
     * Get invoices
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $order_id Array of OrderIds to fetch the invoices for (optional)
     * @param  string|null $text_search A term that can help locating specific invoices. (optional)
     * @param  \OpenAPI\Client\Model\InvoiceStatus|null $status Array of statuses of invoices to be fetched (optional)
     * @param  float|null $end_date End date of the period to retrieve invoices (optional)
     * @param  float|null $take Number of records returned in response (optional)
     * @param  float|null $skip Number of records to skip (optional)
     * @param  float|null $start_date Start date of the period to retrieve invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceData[]|\OpenAPI\Client\Model\ProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function invoicesGetInvoices($store_id, $order_id = null, $text_search = null, $status = null, $end_date = null, $take = null, $skip = null, $start_date = null, string $contentType = self::contentTypes['invoicesGetInvoices'][0])
    {
        list($response) = $this->invoicesGetInvoicesWithHttpInfo($store_id, $order_id, $text_search, $status, $end_date, $take, $skip, $start_date, $contentType);
        return $response;
    }

    /**
     * Operation invoicesGetInvoicesWithHttpInfo
     *
     * Get invoices
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $order_id Array of OrderIds to fetch the invoices for (optional)
     * @param  string|null $text_search A term that can help locating specific invoices. (optional)
     * @param  \OpenAPI\Client\Model\InvoiceStatus|null $status Array of statuses of invoices to be fetched (optional)
     * @param  float|null $end_date End date of the period to retrieve invoices (optional)
     * @param  float|null $take Number of records returned in response (optional)
     * @param  float|null $skip Number of records to skip (optional)
     * @param  float|null $start_date Start date of the period to retrieve invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceData[]|\OpenAPI\Client\Model\ProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesGetInvoicesWithHttpInfo($store_id, $order_id = null, $text_search = null, $status = null, $end_date = null, $take = null, $skip = null, $start_date = null, string $contentType = self::contentTypes['invoicesGetInvoices'][0])
    {
        $request = $this->invoicesGetInvoicesRequest($store_id, $order_id, $text_search, $status, $end_date, $take, $skip, $start_date, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceData[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceData[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesGetInvoicesAsync
     *
     * Get invoices
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $order_id Array of OrderIds to fetch the invoices for (optional)
     * @param  string|null $text_search A term that can help locating specific invoices. (optional)
     * @param  \OpenAPI\Client\Model\InvoiceStatus|null $status Array of statuses of invoices to be fetched (optional)
     * @param  float|null $end_date End date of the period to retrieve invoices (optional)
     * @param  float|null $take Number of records returned in response (optional)
     * @param  float|null $skip Number of records to skip (optional)
     * @param  float|null $start_date Start date of the period to retrieve invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetInvoicesAsync($store_id, $order_id = null, $text_search = null, $status = null, $end_date = null, $take = null, $skip = null, $start_date = null, string $contentType = self::contentTypes['invoicesGetInvoices'][0])
    {
        return $this->invoicesGetInvoicesAsyncWithHttpInfo($store_id, $order_id, $text_search, $status, $end_date, $take, $skip, $start_date, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesGetInvoicesAsyncWithHttpInfo
     *
     * Get invoices
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $order_id Array of OrderIds to fetch the invoices for (optional)
     * @param  string|null $text_search A term that can help locating specific invoices. (optional)
     * @param  \OpenAPI\Client\Model\InvoiceStatus|null $status Array of statuses of invoices to be fetched (optional)
     * @param  float|null $end_date End date of the period to retrieve invoices (optional)
     * @param  float|null $take Number of records returned in response (optional)
     * @param  float|null $skip Number of records to skip (optional)
     * @param  float|null $start_date Start date of the period to retrieve invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesGetInvoicesAsyncWithHttpInfo($store_id, $order_id = null, $text_search = null, $status = null, $end_date = null, $take = null, $skip = null, $start_date = null, string $contentType = self::contentTypes['invoicesGetInvoices'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceData[]';
        $request = $this->invoicesGetInvoicesRequest($store_id, $order_id, $text_search, $status, $end_date, $take, $skip, $start_date, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesGetInvoices'
     *
     * @param  string $store_id The store ID (required)
     * @param  string[]|null $order_id Array of OrderIds to fetch the invoices for (optional)
     * @param  string|null $text_search A term that can help locating specific invoices. (optional)
     * @param  \OpenAPI\Client\Model\InvoiceStatus|null $status Array of statuses of invoices to be fetched (optional)
     * @param  float|null $end_date End date of the period to retrieve invoices (optional)
     * @param  float|null $take Number of records returned in response (optional)
     * @param  float|null $skip Number of records to skip (optional)
     * @param  float|null $start_date Start date of the period to retrieve invoices (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesGetInvoices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesGetInvoicesRequest($store_id, $order_id = null, $text_search = null, $status = null, $end_date = null, $take = null, $skip = null, $start_date = null, string $contentType = self::contentTypes['invoicesGetInvoices'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesGetInvoices'
            );
        }









        $resourcePath = '/api/v1/stores/{storeId}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $text_search,
            'textSearch', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'InvoiceStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_date,
            'endDate', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_date,
            'startDate', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesMarkInvoiceStatus
     *
     * Mark invoice status
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\MarkInvoiceStatusRequest $mark_invoice_status_request mark_invoice_status_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesMarkInvoiceStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function invoicesMarkInvoiceStatus($invoice_id, $store_id, $mark_invoice_status_request, string $contentType = self::contentTypes['invoicesMarkInvoiceStatus'][0])
    {
        list($response) = $this->invoicesMarkInvoiceStatusWithHttpInfo($invoice_id, $store_id, $mark_invoice_status_request, $contentType);
        return $response;
    }

    /**
     * Operation invoicesMarkInvoiceStatusWithHttpInfo
     *
     * Mark invoice status
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\MarkInvoiceStatusRequest $mark_invoice_status_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesMarkInvoiceStatus'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesMarkInvoiceStatusWithHttpInfo($invoice_id, $store_id, $mark_invoice_status_request, string $contentType = self::contentTypes['invoicesMarkInvoiceStatus'][0])
    {
        $request = $this->invoicesMarkInvoiceStatusRequest($invoice_id, $store_id, $mark_invoice_status_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceData',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesMarkInvoiceStatusAsync
     *
     * Mark invoice status
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\MarkInvoiceStatusRequest $mark_invoice_status_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesMarkInvoiceStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesMarkInvoiceStatusAsync($invoice_id, $store_id, $mark_invoice_status_request, string $contentType = self::contentTypes['invoicesMarkInvoiceStatus'][0])
    {
        return $this->invoicesMarkInvoiceStatusAsyncWithHttpInfo($invoice_id, $store_id, $mark_invoice_status_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesMarkInvoiceStatusAsyncWithHttpInfo
     *
     * Mark invoice status
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\MarkInvoiceStatusRequest $mark_invoice_status_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesMarkInvoiceStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesMarkInvoiceStatusAsyncWithHttpInfo($invoice_id, $store_id, $mark_invoice_status_request, string $contentType = self::contentTypes['invoicesMarkInvoiceStatus'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceData';
        $request = $this->invoicesMarkInvoiceStatusRequest($invoice_id, $store_id, $mark_invoice_status_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesMarkInvoiceStatus'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\MarkInvoiceStatusRequest $mark_invoice_status_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesMarkInvoiceStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesMarkInvoiceStatusRequest($invoice_id, $store_id, $mark_invoice_status_request, string $contentType = self::contentTypes['invoicesMarkInvoiceStatus'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesMarkInvoiceStatus'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesMarkInvoiceStatus'
            );
        }

        // verify the required parameter 'mark_invoice_status_request' is set
        if ($mark_invoice_status_request === null || (is_array($mark_invoice_status_request) && count($mark_invoice_status_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mark_invoice_status_request when calling invoicesMarkInvoiceStatus'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($mark_invoice_status_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($mark_invoice_status_request));
            } else {
                $httpBody = $mark_invoice_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesRefund
     *
     * Refund invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\InvoicesRefundRequest $invoices_refund_request invoices_refund_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesRefund'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PullPaymentData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function invoicesRefund($invoice_id, $store_id, $invoices_refund_request, string $contentType = self::contentTypes['invoicesRefund'][0])
    {
        list($response) = $this->invoicesRefundWithHttpInfo($invoice_id, $store_id, $invoices_refund_request, $contentType);
        return $response;
    }

    /**
     * Operation invoicesRefundWithHttpInfo
     *
     * Refund invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\InvoicesRefundRequest $invoices_refund_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesRefund'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PullPaymentData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesRefundWithHttpInfo($invoice_id, $store_id, $invoices_refund_request, string $contentType = self::contentTypes['invoicesRefund'][0])
    {
        $request = $this->invoicesRefundRequest($invoice_id, $store_id, $invoices_refund_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PullPaymentData',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PullPaymentData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PullPaymentData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesRefundAsync
     *
     * Refund invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\InvoicesRefundRequest $invoices_refund_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesRefundAsync($invoice_id, $store_id, $invoices_refund_request, string $contentType = self::contentTypes['invoicesRefund'][0])
    {
        return $this->invoicesRefundAsyncWithHttpInfo($invoice_id, $store_id, $invoices_refund_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesRefundAsyncWithHttpInfo
     *
     * Refund invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\InvoicesRefundRequest $invoices_refund_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesRefundAsyncWithHttpInfo($invoice_id, $store_id, $invoices_refund_request, string $contentType = self::contentTypes['invoicesRefund'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PullPaymentData';
        $request = $this->invoicesRefundRequest($invoice_id, $store_id, $invoices_refund_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesRefund'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\InvoicesRefundRequest $invoices_refund_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesRefundRequest($invoice_id, $store_id, $invoices_refund_request, string $contentType = self::contentTypes['invoicesRefund'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesRefund'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesRefund'
            );
        }

        // verify the required parameter 'invoices_refund_request' is set
        if ($invoices_refund_request === null || (is_array($invoices_refund_request) && count($invoices_refund_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoices_refund_request when calling invoicesRefund'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoices_refund_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoices_refund_request));
            } else {
                $httpBody = $invoices_refund_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesUnarchiveInvoice
     *
     * Unarchive invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUnarchiveInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function invoicesUnarchiveInvoice($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesUnarchiveInvoice'][0])
    {
        list($response) = $this->invoicesUnarchiveInvoiceWithHttpInfo($invoice_id, $store_id, $contentType);
        return $response;
    }

    /**
     * Operation invoicesUnarchiveInvoiceWithHttpInfo
     *
     * Unarchive invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUnarchiveInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesUnarchiveInvoiceWithHttpInfo($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesUnarchiveInvoice'][0])
    {
        $request = $this->invoicesUnarchiveInvoiceRequest($invoice_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceData',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesUnarchiveInvoiceAsync
     *
     * Unarchive invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUnarchiveInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUnarchiveInvoiceAsync($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesUnarchiveInvoice'][0])
    {
        return $this->invoicesUnarchiveInvoiceAsyncWithHttpInfo($invoice_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesUnarchiveInvoiceAsyncWithHttpInfo
     *
     * Unarchive invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUnarchiveInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUnarchiveInvoiceAsyncWithHttpInfo($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesUnarchiveInvoice'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceData';
        $request = $this->invoicesUnarchiveInvoiceRequest($invoice_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesUnarchiveInvoice'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUnarchiveInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesUnarchiveInvoiceRequest($invoice_id, $store_id, string $contentType = self::contentTypes['invoicesUnarchiveInvoice'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesUnarchiveInvoice'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesUnarchiveInvoice'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}/unarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation invoicesUpdateInvoice
     *
     * Update invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdateInvoiceRequest $update_invoice_request update_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUpdateInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function invoicesUpdateInvoice($invoice_id, $store_id, $update_invoice_request, string $contentType = self::contentTypes['invoicesUpdateInvoice'][0])
    {
        list($response) = $this->invoicesUpdateInvoiceWithHttpInfo($invoice_id, $store_id, $update_invoice_request, $contentType);
        return $response;
    }

    /**
     * Operation invoicesUpdateInvoiceWithHttpInfo
     *
     * Update invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdateInvoiceRequest $update_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUpdateInvoice'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function invoicesUpdateInvoiceWithHttpInfo($invoice_id, $store_id, $update_invoice_request, string $contentType = self::contentTypes['invoicesUpdateInvoice'][0])
    {
        $request = $this->invoicesUpdateInvoiceRequest($invoice_id, $store_id, $update_invoice_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceData',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation invoicesUpdateInvoiceAsync
     *
     * Update invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdateInvoiceRequest $update_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUpdateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUpdateInvoiceAsync($invoice_id, $store_id, $update_invoice_request, string $contentType = self::contentTypes['invoicesUpdateInvoice'][0])
    {
        return $this->invoicesUpdateInvoiceAsyncWithHttpInfo($invoice_id, $store_id, $update_invoice_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation invoicesUpdateInvoiceAsyncWithHttpInfo
     *
     * Update invoice
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdateInvoiceRequest $update_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUpdateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function invoicesUpdateInvoiceAsyncWithHttpInfo($invoice_id, $store_id, $update_invoice_request, string $contentType = self::contentTypes['invoicesUpdateInvoice'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceData';
        $request = $this->invoicesUpdateInvoiceRequest($invoice_id, $store_id, $update_invoice_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'invoicesUpdateInvoice'
     *
     * @param  string $invoice_id The invoice ID (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdateInvoiceRequest $update_invoice_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['invoicesUpdateInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function invoicesUpdateInvoiceRequest($invoice_id, $store_id, $update_invoice_request, string $contentType = self::contentTypes['invoicesUpdateInvoice'][0])
    {

        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling invoicesUpdateInvoice'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling invoicesUpdateInvoice'
            );
        }

        // verify the required parameter 'update_invoice_request' is set
        if ($update_invoice_request === null || (is_array($update_invoice_request) && count($update_invoice_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_invoice_request when calling invoicesUpdateInvoice'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/invoices/{invoiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceId' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_invoice_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_invoice_request));
            } else {
                $httpBody = $update_invoice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
