<?php
/**
 * StoresPayoutsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StoresPayoutsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StoresPayoutsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getStorePayout' => [
            'application/json',
        ],
        'payoutsCreatePayoutThroughStore' => [
            'application/json',
        ],
        'pullPaymentsApprovePayout' => [
            'application/json',
        ],
        'pullPaymentsCancelPayout' => [
            'application/json',
        ],
        'pullPaymentsGetStorePayouts' => [
            'application/json',
        ],
        'pullPaymentsMarkPayout' => [
            'application/json',
        ],
        'pullPaymentsMarkPayoutPaid' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getStorePayout
     *
     * Get Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorePayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayoutData
     */
    public function getStorePayout($store_id, $payout_id, string $contentType = self::contentTypes['getStorePayout'][0])
    {
        list($response) = $this->getStorePayoutWithHttpInfo($store_id, $payout_id, $contentType);
        return $response;
    }

    /**
     * Operation getStorePayoutWithHttpInfo
     *
     * Get Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorePayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayoutData, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStorePayoutWithHttpInfo($store_id, $payout_id, string $contentType = self::contentTypes['getStorePayout'][0])
    {
        $request = $this->getStorePayoutRequest($store_id, $payout_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PayoutData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PayoutData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayoutData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getStorePayoutAsync
     *
     * Get Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStorePayoutAsync($store_id, $payout_id, string $contentType = self::contentTypes['getStorePayout'][0])
    {
        return $this->getStorePayoutAsyncWithHttpInfo($store_id, $payout_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStorePayoutAsyncWithHttpInfo
     *
     * Get Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStorePayoutAsyncWithHttpInfo($store_id, $payout_id, string $contentType = self::contentTypes['getStorePayout'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayoutData';
        $request = $this->getStorePayoutRequest($store_id, $payout_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStorePayout'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStorePayoutRequest($store_id, $payout_id, string $contentType = self::contentTypes['getStorePayout'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling getStorePayout'
            );
        }

        // verify the required parameter 'payout_id' is set
        if ($payout_id === null || (is_array($payout_id) && count($payout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_id when calling getStorePayout'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payouts/{payoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payoutId' . '}',
                ObjectSerializer::toPathValue($payout_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation payoutsCreatePayoutThroughStore
     *
     * Create Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutThroughStoreRequest $create_payout_through_store_request create_payout_through_store_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payoutsCreatePayoutThroughStore'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayoutData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]|\OpenAPI\Client\Model\ProblemDetails
     */
    public function payoutsCreatePayoutThroughStore($store_id, $create_payout_through_store_request, string $contentType = self::contentTypes['payoutsCreatePayoutThroughStore'][0])
    {
        list($response) = $this->payoutsCreatePayoutThroughStoreWithHttpInfo($store_id, $create_payout_through_store_request, $contentType);
        return $response;
    }

    /**
     * Operation payoutsCreatePayoutThroughStoreWithHttpInfo
     *
     * Create Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutThroughStoreRequest $create_payout_through_store_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payoutsCreatePayoutThroughStore'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayoutData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function payoutsCreatePayoutThroughStoreWithHttpInfo($store_id, $create_payout_through_store_request, string $contentType = self::contentTypes['payoutsCreatePayoutThroughStore'][0])
    {
        $request = $this->payoutsCreatePayoutThroughStoreRequest($store_id, $create_payout_through_store_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PayoutData',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PayoutData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayoutData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation payoutsCreatePayoutThroughStoreAsync
     *
     * Create Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutThroughStoreRequest $create_payout_through_store_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payoutsCreatePayoutThroughStore'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payoutsCreatePayoutThroughStoreAsync($store_id, $create_payout_through_store_request, string $contentType = self::contentTypes['payoutsCreatePayoutThroughStore'][0])
    {
        return $this->payoutsCreatePayoutThroughStoreAsyncWithHttpInfo($store_id, $create_payout_through_store_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation payoutsCreatePayoutThroughStoreAsyncWithHttpInfo
     *
     * Create Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutThroughStoreRequest $create_payout_through_store_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payoutsCreatePayoutThroughStore'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function payoutsCreatePayoutThroughStoreAsyncWithHttpInfo($store_id, $create_payout_through_store_request, string $contentType = self::contentTypes['payoutsCreatePayoutThroughStore'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayoutData';
        $request = $this->payoutsCreatePayoutThroughStoreRequest($store_id, $create_payout_through_store_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'payoutsCreatePayoutThroughStore'
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutThroughStoreRequest $create_payout_through_store_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['payoutsCreatePayoutThroughStore'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function payoutsCreatePayoutThroughStoreRequest($store_id, $create_payout_through_store_request, string $contentType = self::contentTypes['payoutsCreatePayoutThroughStore'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling payoutsCreatePayoutThroughStore'
            );
        }

        // verify the required parameter 'create_payout_through_store_request' is set
        if ($create_payout_through_store_request === null || (is_array($create_payout_through_store_request) && count($create_payout_through_store_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_payout_through_store_request when calling payoutsCreatePayoutThroughStore'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payout_through_store_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payout_through_store_request));
            } else {
                $httpBody = $create_payout_through_store_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsApprovePayout
     *
     * Approve Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsApprovePayoutRequest|null $pull_payments_approve_payout_request pull_payments_approve_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsApprovePayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayoutData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]|\OpenAPI\Client\Model\ProblemDetails
     */
    public function pullPaymentsApprovePayout($store_id, $payout_id, $pull_payments_approve_payout_request = null, string $contentType = self::contentTypes['pullPaymentsApprovePayout'][0])
    {
        list($response) = $this->pullPaymentsApprovePayoutWithHttpInfo($store_id, $payout_id, $pull_payments_approve_payout_request, $contentType);
        return $response;
    }

    /**
     * Operation pullPaymentsApprovePayoutWithHttpInfo
     *
     * Approve Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsApprovePayoutRequest|null $pull_payments_approve_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsApprovePayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayoutData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsApprovePayoutWithHttpInfo($store_id, $payout_id, $pull_payments_approve_payout_request = null, string $contentType = self::contentTypes['pullPaymentsApprovePayout'][0])
    {
        $request = $this->pullPaymentsApprovePayoutRequest($store_id, $payout_id, $pull_payments_approve_payout_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PayoutData',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PayoutData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayoutData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsApprovePayoutAsync
     *
     * Approve Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsApprovePayoutRequest|null $pull_payments_approve_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsApprovePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsApprovePayoutAsync($store_id, $payout_id, $pull_payments_approve_payout_request = null, string $contentType = self::contentTypes['pullPaymentsApprovePayout'][0])
    {
        return $this->pullPaymentsApprovePayoutAsyncWithHttpInfo($store_id, $payout_id, $pull_payments_approve_payout_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsApprovePayoutAsyncWithHttpInfo
     *
     * Approve Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsApprovePayoutRequest|null $pull_payments_approve_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsApprovePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsApprovePayoutAsyncWithHttpInfo($store_id, $payout_id, $pull_payments_approve_payout_request = null, string $contentType = self::contentTypes['pullPaymentsApprovePayout'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayoutData';
        $request = $this->pullPaymentsApprovePayoutRequest($store_id, $payout_id, $pull_payments_approve_payout_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsApprovePayout'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsApprovePayoutRequest|null $pull_payments_approve_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsApprovePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsApprovePayoutRequest($store_id, $payout_id, $pull_payments_approve_payout_request = null, string $contentType = self::contentTypes['pullPaymentsApprovePayout'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling pullPaymentsApprovePayout'
            );
        }

        // verify the required parameter 'payout_id' is set
        if ($payout_id === null || (is_array($payout_id) && count($payout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_id when calling pullPaymentsApprovePayout'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/payouts/{payoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payoutId' . '}',
                ObjectSerializer::toPathValue($payout_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pull_payments_approve_payout_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pull_payments_approve_payout_request));
            } else {
                $httpBody = $pull_payments_approve_payout_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsCancelPayout
     *
     * Cancel Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCancelPayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pullPaymentsCancelPayout($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsCancelPayout'][0])
    {
        $this->pullPaymentsCancelPayoutWithHttpInfo($store_id, $payout_id, $contentType);
    }

    /**
     * Operation pullPaymentsCancelPayoutWithHttpInfo
     *
     * Cancel Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCancelPayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsCancelPayoutWithHttpInfo($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsCancelPayout'][0])
    {
        $request = $this->pullPaymentsCancelPayoutRequest($store_id, $payout_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsCancelPayoutAsync
     *
     * Cancel Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCancelPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsCancelPayoutAsync($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsCancelPayout'][0])
    {
        return $this->pullPaymentsCancelPayoutAsyncWithHttpInfo($store_id, $payout_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsCancelPayoutAsyncWithHttpInfo
     *
     * Cancel Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCancelPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsCancelPayoutAsyncWithHttpInfo($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsCancelPayout'][0])
    {
        $returnType = '';
        $request = $this->pullPaymentsCancelPayoutRequest($store_id, $payout_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsCancelPayout'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCancelPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsCancelPayoutRequest($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsCancelPayout'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling pullPaymentsCancelPayout'
            );
        }

        // verify the required parameter 'payout_id' is set
        if ($payout_id === null || (is_array($payout_id) && count($payout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_id when calling pullPaymentsCancelPayout'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payouts/{payoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payoutId' . '}',
                ObjectSerializer::toPathValue($payout_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsGetStorePayouts
     *
     * Get Store Payouts
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetStorePayouts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayoutData[]
     */
    public function pullPaymentsGetStorePayouts($store_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetStorePayouts'][0])
    {
        list($response) = $this->pullPaymentsGetStorePayoutsWithHttpInfo($store_id, $include_cancelled, $contentType);
        return $response;
    }

    /**
     * Operation pullPaymentsGetStorePayoutsWithHttpInfo
     *
     * Get Store Payouts
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetStorePayouts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayoutData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsGetStorePayoutsWithHttpInfo($store_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetStorePayouts'][0])
    {
        $request = $this->pullPaymentsGetStorePayoutsRequest($store_id, $include_cancelled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PayoutData[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PayoutData[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayoutData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsGetStorePayoutsAsync
     *
     * Get Store Payouts
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetStorePayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetStorePayoutsAsync($store_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetStorePayouts'][0])
    {
        return $this->pullPaymentsGetStorePayoutsAsyncWithHttpInfo($store_id, $include_cancelled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsGetStorePayoutsAsyncWithHttpInfo
     *
     * Get Store Payouts
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetStorePayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetStorePayoutsAsyncWithHttpInfo($store_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetStorePayouts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayoutData[]';
        $request = $this->pullPaymentsGetStorePayoutsRequest($store_id, $include_cancelled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsGetStorePayouts'
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetStorePayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsGetStorePayoutsRequest($store_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetStorePayouts'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling pullPaymentsGetStorePayouts'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_cancelled,
            'includeCancelled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsMarkPayout
     *
     * Mark Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsMarkPayoutRequest|null $pull_payments_mark_payout_request pull_payments_mark_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pullPaymentsMarkPayout($store_id, $payout_id, $pull_payments_mark_payout_request = null, string $contentType = self::contentTypes['pullPaymentsMarkPayout'][0])
    {
        $this->pullPaymentsMarkPayoutWithHttpInfo($store_id, $payout_id, $pull_payments_mark_payout_request, $contentType);
    }

    /**
     * Operation pullPaymentsMarkPayoutWithHttpInfo
     *
     * Mark Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsMarkPayoutRequest|null $pull_payments_mark_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsMarkPayoutWithHttpInfo($store_id, $payout_id, $pull_payments_mark_payout_request = null, string $contentType = self::contentTypes['pullPaymentsMarkPayout'][0])
    {
        $request = $this->pullPaymentsMarkPayoutRequest($store_id, $payout_id, $pull_payments_mark_payout_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsMarkPayoutAsync
     *
     * Mark Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsMarkPayoutRequest|null $pull_payments_mark_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsMarkPayoutAsync($store_id, $payout_id, $pull_payments_mark_payout_request = null, string $contentType = self::contentTypes['pullPaymentsMarkPayout'][0])
    {
        return $this->pullPaymentsMarkPayoutAsyncWithHttpInfo($store_id, $payout_id, $pull_payments_mark_payout_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsMarkPayoutAsyncWithHttpInfo
     *
     * Mark Payout
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsMarkPayoutRequest|null $pull_payments_mark_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsMarkPayoutAsyncWithHttpInfo($store_id, $payout_id, $pull_payments_mark_payout_request = null, string $contentType = self::contentTypes['pullPaymentsMarkPayout'][0])
    {
        $returnType = '';
        $request = $this->pullPaymentsMarkPayoutRequest($store_id, $payout_id, $pull_payments_mark_payout_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsMarkPayout'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsMarkPayoutRequest|null $pull_payments_mark_payout_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsMarkPayoutRequest($store_id, $payout_id, $pull_payments_mark_payout_request = null, string $contentType = self::contentTypes['pullPaymentsMarkPayout'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling pullPaymentsMarkPayout'
            );
        }

        // verify the required parameter 'payout_id' is set
        if ($payout_id === null || (is_array($payout_id) && count($payout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_id when calling pullPaymentsMarkPayout'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/payouts/{payoutId}/mark';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payoutId' . '}',
                ObjectSerializer::toPathValue($payout_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pull_payments_mark_payout_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pull_payments_mark_payout_request));
            } else {
                $httpBody = $pull_payments_mark_payout_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsMarkPayoutPaid
     *
     * Mark Payout as Paid
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayoutPaid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pullPaymentsMarkPayoutPaid($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsMarkPayoutPaid'][0])
    {
        $this->pullPaymentsMarkPayoutPaidWithHttpInfo($store_id, $payout_id, $contentType);
    }

    /**
     * Operation pullPaymentsMarkPayoutPaidWithHttpInfo
     *
     * Mark Payout as Paid
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayoutPaid'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsMarkPayoutPaidWithHttpInfo($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsMarkPayoutPaid'][0])
    {
        $request = $this->pullPaymentsMarkPayoutPaidRequest($store_id, $payout_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsMarkPayoutPaidAsync
     *
     * Mark Payout as Paid
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayoutPaid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsMarkPayoutPaidAsync($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsMarkPayoutPaid'][0])
    {
        return $this->pullPaymentsMarkPayoutPaidAsyncWithHttpInfo($store_id, $payout_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsMarkPayoutPaidAsyncWithHttpInfo
     *
     * Mark Payout as Paid
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayoutPaid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsMarkPayoutPaidAsyncWithHttpInfo($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsMarkPayoutPaid'][0])
    {
        $returnType = '';
        $request = $this->pullPaymentsMarkPayoutPaidRequest($store_id, $payout_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsMarkPayoutPaid'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payout_id The ID of the payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsMarkPayoutPaid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsMarkPayoutPaidRequest($store_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsMarkPayoutPaid'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling pullPaymentsMarkPayoutPaid'
            );
        }

        // verify the required parameter 'payout_id' is set
        if ($payout_id === null || (is_array($payout_id) && count($payout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_id when calling pullPaymentsMarkPayoutPaid'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payouts/{payoutId}/mark-paid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payoutId' . '}',
                ObjectSerializer::toPathValue($payout_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
