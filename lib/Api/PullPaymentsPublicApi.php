<?php
/**
 * PullPaymentsPublicApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PullPaymentsPublicApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PullPaymentsPublicApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'pullPaymentsCreatePayout' => [
            'application/json',
        ],
        'pullPaymentsGetPayout' => [
            'application/json',
        ],
        'pullPaymentsGetPayouts' => [
            'application/json',
        ],
        'pullPaymentsGetPullPayment' => [
            'application/json',
        ],
        'pullPaymentsGetPullPaymentLNURL' => [
            'application/json',
        ],
        'pullPaymentsLinkBoltcard' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pullPaymentsCreatePayout
     *
     * Create Payout
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutRequest $create_payout_request create_payout_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCreatePayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayoutData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]|\OpenAPI\Client\Model\ProblemDetails
     */
    public function pullPaymentsCreatePayout($pull_payment_id, $create_payout_request, string $contentType = self::contentTypes['pullPaymentsCreatePayout'][0])
    {
        list($response) = $this->pullPaymentsCreatePayoutWithHttpInfo($pull_payment_id, $create_payout_request, $contentType);
        return $response;
    }

    /**
     * Operation pullPaymentsCreatePayoutWithHttpInfo
     *
     * Create Payout
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutRequest $create_payout_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCreatePayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayoutData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsCreatePayoutWithHttpInfo($pull_payment_id, $create_payout_request, string $contentType = self::contentTypes['pullPaymentsCreatePayout'][0])
    {
        $request = $this->pullPaymentsCreatePayoutRequest($pull_payment_id, $create_payout_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PayoutData',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PayoutData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayoutData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsCreatePayoutAsync
     *
     * Create Payout
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutRequest $create_payout_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCreatePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsCreatePayoutAsync($pull_payment_id, $create_payout_request, string $contentType = self::contentTypes['pullPaymentsCreatePayout'][0])
    {
        return $this->pullPaymentsCreatePayoutAsyncWithHttpInfo($pull_payment_id, $create_payout_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsCreatePayoutAsyncWithHttpInfo
     *
     * Create Payout
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutRequest $create_payout_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCreatePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsCreatePayoutAsyncWithHttpInfo($pull_payment_id, $create_payout_request, string $contentType = self::contentTypes['pullPaymentsCreatePayout'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayoutData';
        $request = $this->pullPaymentsCreatePayoutRequest($pull_payment_id, $create_payout_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsCreatePayout'
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\CreatePayoutRequest $create_payout_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsCreatePayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsCreatePayoutRequest($pull_payment_id, $create_payout_request, string $contentType = self::contentTypes['pullPaymentsCreatePayout'][0])
    {

        // verify the required parameter 'pull_payment_id' is set
        if ($pull_payment_id === null || (is_array($pull_payment_id) && count($pull_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pull_payment_id when calling pullPaymentsCreatePayout'
            );
        }

        // verify the required parameter 'create_payout_request' is set
        if ($create_payout_request === null || (is_array($create_payout_request) && count($create_payout_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_payout_request when calling pullPaymentsCreatePayout'
            );
        }


        $resourcePath = '/api/v1/pull-payments/{pullPaymentId}/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pull_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pullPaymentId' . '}',
                ObjectSerializer::toPathValue($pull_payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_payout_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_payout_request));
            } else {
                $httpBody = $create_payout_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsGetPayout
     *
     * Get Payout
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $payout_id The ID of the pull payment payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayoutData
     */
    public function pullPaymentsGetPayout($pull_payment_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsGetPayout'][0])
    {
        list($response) = $this->pullPaymentsGetPayoutWithHttpInfo($pull_payment_id, $payout_id, $contentType);
        return $response;
    }

    /**
     * Operation pullPaymentsGetPayoutWithHttpInfo
     *
     * Get Payout
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $payout_id The ID of the pull payment payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayout'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayoutData, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsGetPayoutWithHttpInfo($pull_payment_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsGetPayout'][0])
    {
        $request = $this->pullPaymentsGetPayoutRequest($pull_payment_id, $payout_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PayoutData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PayoutData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayoutData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsGetPayoutAsync
     *
     * Get Payout
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $payout_id The ID of the pull payment payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetPayoutAsync($pull_payment_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsGetPayout'][0])
    {
        return $this->pullPaymentsGetPayoutAsyncWithHttpInfo($pull_payment_id, $payout_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsGetPayoutAsyncWithHttpInfo
     *
     * Get Payout
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $payout_id The ID of the pull payment payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetPayoutAsyncWithHttpInfo($pull_payment_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsGetPayout'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayoutData';
        $request = $this->pullPaymentsGetPayoutRequest($pull_payment_id, $payout_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsGetPayout'
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $payout_id The ID of the pull payment payout (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayout'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsGetPayoutRequest($pull_payment_id, $payout_id, string $contentType = self::contentTypes['pullPaymentsGetPayout'][0])
    {

        // verify the required parameter 'pull_payment_id' is set
        if ($pull_payment_id === null || (is_array($pull_payment_id) && count($pull_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pull_payment_id when calling pullPaymentsGetPayout'
            );
        }

        // verify the required parameter 'payout_id' is set
        if ($payout_id === null || (is_array($payout_id) && count($payout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payout_id when calling pullPaymentsGetPayout'
            );
        }


        $resourcePath = '/api/v1/pull-payments/{pullPaymentId}/payouts/{payoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pull_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pullPaymentId' . '}',
                ObjectSerializer::toPathValue($pull_payment_id),
                $resourcePath
            );
        }
        // path params
        if ($payout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payoutId' . '}',
                ObjectSerializer::toPathValue($payout_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsGetPayouts
     *
     * Get Payouts
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayouts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PayoutData[]
     */
    public function pullPaymentsGetPayouts($pull_payment_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetPayouts'][0])
    {
        list($response) = $this->pullPaymentsGetPayoutsWithHttpInfo($pull_payment_id, $include_cancelled, $contentType);
        return $response;
    }

    /**
     * Operation pullPaymentsGetPayoutsWithHttpInfo
     *
     * Get Payouts
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayouts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PayoutData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsGetPayoutsWithHttpInfo($pull_payment_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetPayouts'][0])
    {
        $request = $this->pullPaymentsGetPayoutsRequest($pull_payment_id, $include_cancelled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PayoutData[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PayoutData[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PayoutData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsGetPayoutsAsync
     *
     * Get Payouts
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetPayoutsAsync($pull_payment_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetPayouts'][0])
    {
        return $this->pullPaymentsGetPayoutsAsyncWithHttpInfo($pull_payment_id, $include_cancelled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsGetPayoutsAsyncWithHttpInfo
     *
     * Get Payouts
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetPayoutsAsyncWithHttpInfo($pull_payment_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetPayouts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PayoutData[]';
        $request = $this->pullPaymentsGetPayoutsRequest($pull_payment_id, $include_cancelled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsGetPayouts'
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  bool|null $include_cancelled Whether this should list cancelled payouts (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPayouts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsGetPayoutsRequest($pull_payment_id, $include_cancelled = false, string $contentType = self::contentTypes['pullPaymentsGetPayouts'][0])
    {

        // verify the required parameter 'pull_payment_id' is set
        if ($pull_payment_id === null || (is_array($pull_payment_id) && count($pull_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pull_payment_id when calling pullPaymentsGetPayouts'
            );
        }



        $resourcePath = '/api/v1/pull-payments/{pullPaymentId}/payouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_cancelled,
            'includeCancelled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($pull_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pullPaymentId' . '}',
                ObjectSerializer::toPathValue($pull_payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsGetPullPayment
     *
     * Get Pull Payment
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PullPaymentData
     */
    public function pullPaymentsGetPullPayment($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPayment'][0])
    {
        list($response) = $this->pullPaymentsGetPullPaymentWithHttpInfo($pull_payment_id, $contentType);
        return $response;
    }

    /**
     * Operation pullPaymentsGetPullPaymentWithHttpInfo
     *
     * Get Pull Payment
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPayment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PullPaymentData, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsGetPullPaymentWithHttpInfo($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPayment'][0])
    {
        $request = $this->pullPaymentsGetPullPaymentRequest($pull_payment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PullPaymentData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PullPaymentData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PullPaymentData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsGetPullPaymentAsync
     *
     * Get Pull Payment
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetPullPaymentAsync($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPayment'][0])
    {
        return $this->pullPaymentsGetPullPaymentAsyncWithHttpInfo($pull_payment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsGetPullPaymentAsyncWithHttpInfo
     *
     * Get Pull Payment
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetPullPaymentAsyncWithHttpInfo($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPayment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PullPaymentData';
        $request = $this->pullPaymentsGetPullPaymentRequest($pull_payment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsGetPullPayment'
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPayment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsGetPullPaymentRequest($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPayment'][0])
    {

        // verify the required parameter 'pull_payment_id' is set
        if ($pull_payment_id === null || (is_array($pull_payment_id) && count($pull_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pull_payment_id when calling pullPaymentsGetPullPayment'
            );
        }


        $resourcePath = '/api/v1/pull-payments/{pullPaymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pull_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pullPaymentId' . '}',
                ObjectSerializer::toPathValue($pull_payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsGetPullPaymentLNURL
     *
     * Get Pull Payment LNURL details
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPaymentLNURL'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LNURLData
     */
    public function pullPaymentsGetPullPaymentLNURL($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPaymentLNURL'][0])
    {
        list($response) = $this->pullPaymentsGetPullPaymentLNURLWithHttpInfo($pull_payment_id, $contentType);
        return $response;
    }

    /**
     * Operation pullPaymentsGetPullPaymentLNURLWithHttpInfo
     *
     * Get Pull Payment LNURL details
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPaymentLNURL'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LNURLData, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsGetPullPaymentLNURLWithHttpInfo($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPaymentLNURL'][0])
    {
        $request = $this->pullPaymentsGetPullPaymentLNURLRequest($pull_payment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\LNURLData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\LNURLData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LNURLData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsGetPullPaymentLNURLAsync
     *
     * Get Pull Payment LNURL details
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPaymentLNURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetPullPaymentLNURLAsync($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPaymentLNURL'][0])
    {
        return $this->pullPaymentsGetPullPaymentLNURLAsyncWithHttpInfo($pull_payment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsGetPullPaymentLNURLAsyncWithHttpInfo
     *
     * Get Pull Payment LNURL details
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPaymentLNURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsGetPullPaymentLNURLAsyncWithHttpInfo($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPaymentLNURL'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LNURLData';
        $request = $this->pullPaymentsGetPullPaymentLNURLRequest($pull_payment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsGetPullPaymentLNURL'
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsGetPullPaymentLNURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsGetPullPaymentLNURLRequest($pull_payment_id, string $contentType = self::contentTypes['pullPaymentsGetPullPaymentLNURL'][0])
    {

        // verify the required parameter 'pull_payment_id' is set
        if ($pull_payment_id === null || (is_array($pull_payment_id) && count($pull_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pull_payment_id when calling pullPaymentsGetPullPaymentLNURL'
            );
        }


        $resourcePath = '/api/v1/pull-payments/{pullPaymentId}/lnurl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pull_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pullPaymentId' . '}',
                ObjectSerializer::toPathValue($pull_payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pullPaymentsLinkBoltcard
     *
     * Link a boltcard to a pull payment
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsLinkBoltcardRequest|null $pull_payments_link_boltcard_request pull_payments_link_boltcard_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsLinkBoltcard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PullPaymentsLinkBoltcard200Response|\OpenAPI\Client\Model\ProblemDetails
     */
    public function pullPaymentsLinkBoltcard($pull_payment_id, $pull_payments_link_boltcard_request = null, string $contentType = self::contentTypes['pullPaymentsLinkBoltcard'][0])
    {
        list($response) = $this->pullPaymentsLinkBoltcardWithHttpInfo($pull_payment_id, $pull_payments_link_boltcard_request, $contentType);
        return $response;
    }

    /**
     * Operation pullPaymentsLinkBoltcardWithHttpInfo
     *
     * Link a boltcard to a pull payment
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsLinkBoltcardRequest|null $pull_payments_link_boltcard_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsLinkBoltcard'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PullPaymentsLinkBoltcard200Response|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function pullPaymentsLinkBoltcardWithHttpInfo($pull_payment_id, $pull_payments_link_boltcard_request = null, string $contentType = self::contentTypes['pullPaymentsLinkBoltcard'][0])
    {
        $request = $this->pullPaymentsLinkBoltcardRequest($pull_payment_id, $pull_payments_link_boltcard_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PullPaymentsLinkBoltcard200Response',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PullPaymentsLinkBoltcard200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PullPaymentsLinkBoltcard200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation pullPaymentsLinkBoltcardAsync
     *
     * Link a boltcard to a pull payment
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsLinkBoltcardRequest|null $pull_payments_link_boltcard_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsLinkBoltcard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsLinkBoltcardAsync($pull_payment_id, $pull_payments_link_boltcard_request = null, string $contentType = self::contentTypes['pullPaymentsLinkBoltcard'][0])
    {
        return $this->pullPaymentsLinkBoltcardAsyncWithHttpInfo($pull_payment_id, $pull_payments_link_boltcard_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pullPaymentsLinkBoltcardAsyncWithHttpInfo
     *
     * Link a boltcard to a pull payment
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsLinkBoltcardRequest|null $pull_payments_link_boltcard_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsLinkBoltcard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pullPaymentsLinkBoltcardAsyncWithHttpInfo($pull_payment_id, $pull_payments_link_boltcard_request = null, string $contentType = self::contentTypes['pullPaymentsLinkBoltcard'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PullPaymentsLinkBoltcard200Response';
        $request = $this->pullPaymentsLinkBoltcardRequest($pull_payment_id, $pull_payments_link_boltcard_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pullPaymentsLinkBoltcard'
     *
     * @param  string $pull_payment_id The ID of the pull payment (required)
     * @param  \OpenAPI\Client\Model\PullPaymentsLinkBoltcardRequest|null $pull_payments_link_boltcard_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pullPaymentsLinkBoltcard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pullPaymentsLinkBoltcardRequest($pull_payment_id, $pull_payments_link_boltcard_request = null, string $contentType = self::contentTypes['pullPaymentsLinkBoltcard'][0])
    {

        // verify the required parameter 'pull_payment_id' is set
        if ($pull_payment_id === null || (is_array($pull_payment_id) && count($pull_payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pull_payment_id when calling pullPaymentsLinkBoltcard'
            );
        }



        $resourcePath = '/api/v1/pull-payments/{pullPaymentId}/boltcards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($pull_payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'pullPaymentId' . '}',
                ObjectSerializer::toPathValue($pull_payment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pull_payments_link_boltcard_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pull_payments_link_boltcard_request));
            } else {
                $httpBody = $pull_payments_link_boltcard_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
