<?php
/**
 * PaymentRequestsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PaymentRequestsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentRequestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'paymentRequestsArchivePaymentRequest' => [
            'application/json',
        ],
        'paymentRequestsCreatePaymentRequest' => [
            'application/json',
        ],
        'paymentRequestsGetPaymentRequest' => [
            'application/json',
        ],
        'paymentRequestsGetPaymentRequests' => [
            'application/json',
        ],
        'paymentRequestsPay' => [
            'application/json',
        ],
        'paymentRequestsUpdatePaymentRequest' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation paymentRequestsArchivePaymentRequest
     *
     * Archive payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsArchivePaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function paymentRequestsArchivePaymentRequest($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsArchivePaymentRequest'][0])
    {
        $this->paymentRequestsArchivePaymentRequestWithHttpInfo($store_id, $payment_request_id, $contentType);
    }

    /**
     * Operation paymentRequestsArchivePaymentRequestWithHttpInfo
     *
     * Archive payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsArchivePaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentRequestsArchivePaymentRequestWithHttpInfo($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsArchivePaymentRequest'][0])
    {
        $request = $this->paymentRequestsArchivePaymentRequestRequest($store_id, $payment_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation paymentRequestsArchivePaymentRequestAsync
     *
     * Archive payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsArchivePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsArchivePaymentRequestAsync($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsArchivePaymentRequest'][0])
    {
        return $this->paymentRequestsArchivePaymentRequestAsyncWithHttpInfo($store_id, $payment_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentRequestsArchivePaymentRequestAsyncWithHttpInfo
     *
     * Archive payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsArchivePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsArchivePaymentRequestAsyncWithHttpInfo($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsArchivePaymentRequest'][0])
    {
        $returnType = '';
        $request = $this->paymentRequestsArchivePaymentRequestRequest($store_id, $payment_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentRequestsArchivePaymentRequest'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsArchivePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentRequestsArchivePaymentRequestRequest($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsArchivePaymentRequest'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling paymentRequestsArchivePaymentRequest'
            );
        }

        // verify the required parameter 'payment_request_id' is set
        if ($payment_request_id === null || (is_array($payment_request_id) && count($payment_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request_id when calling paymentRequestsArchivePaymentRequest'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payment-requests/{paymentRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentRequestId' . '}',
                ObjectSerializer::toPathValue($payment_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentRequestsCreatePaymentRequest
     *
     * Create a new payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsCreatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaymentRequestData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function paymentRequestsCreatePaymentRequest($store_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsCreatePaymentRequest'][0])
    {
        list($response) = $this->paymentRequestsCreatePaymentRequestWithHttpInfo($store_id, $payment_request_base_data, $contentType);
        return $response;
    }

    /**
     * Operation paymentRequestsCreatePaymentRequestWithHttpInfo
     *
     * Create a new payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsCreatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaymentRequestData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentRequestsCreatePaymentRequestWithHttpInfo($store_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsCreatePaymentRequest'][0])
    {
        $request = $this->paymentRequestsCreatePaymentRequestRequest($store_id, $payment_request_base_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PaymentRequestData',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PaymentRequestData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentRequestData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation paymentRequestsCreatePaymentRequestAsync
     *
     * Create a new payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsCreatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsCreatePaymentRequestAsync($store_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsCreatePaymentRequest'][0])
    {
        return $this->paymentRequestsCreatePaymentRequestAsyncWithHttpInfo($store_id, $payment_request_base_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentRequestsCreatePaymentRequestAsyncWithHttpInfo
     *
     * Create a new payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsCreatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsCreatePaymentRequestAsyncWithHttpInfo($store_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsCreatePaymentRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaymentRequestData';
        $request = $this->paymentRequestsCreatePaymentRequestRequest($store_id, $payment_request_base_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentRequestsCreatePaymentRequest'
     *
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsCreatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentRequestsCreatePaymentRequestRequest($store_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsCreatePaymentRequest'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling paymentRequestsCreatePaymentRequest'
            );
        }

        // verify the required parameter 'payment_request_base_data' is set
        if ($payment_request_base_data === null || (is_array($payment_request_base_data) && count($payment_request_base_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request_base_data when calling paymentRequestsCreatePaymentRequest'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payment-requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment_request_base_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment_request_base_data));
            } else {
                $httpBody = $payment_request_base_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentRequestsGetPaymentRequest
     *
     * Get payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaymentRequestData
     */
    public function paymentRequestsGetPaymentRequest($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequest'][0])
    {
        list($response) = $this->paymentRequestsGetPaymentRequestWithHttpInfo($store_id, $payment_request_id, $contentType);
        return $response;
    }

    /**
     * Operation paymentRequestsGetPaymentRequestWithHttpInfo
     *
     * Get payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaymentRequestData, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentRequestsGetPaymentRequestWithHttpInfo($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequest'][0])
    {
        $request = $this->paymentRequestsGetPaymentRequestRequest($store_id, $payment_request_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PaymentRequestData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PaymentRequestData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentRequestData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation paymentRequestsGetPaymentRequestAsync
     *
     * Get payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsGetPaymentRequestAsync($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequest'][0])
    {
        return $this->paymentRequestsGetPaymentRequestAsyncWithHttpInfo($store_id, $payment_request_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentRequestsGetPaymentRequestAsyncWithHttpInfo
     *
     * Get payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsGetPaymentRequestAsyncWithHttpInfo($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaymentRequestData';
        $request = $this->paymentRequestsGetPaymentRequestRequest($store_id, $payment_request_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentRequestsGetPaymentRequest'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentRequestsGetPaymentRequestRequest($store_id, $payment_request_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequest'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling paymentRequestsGetPaymentRequest'
            );
        }

        // verify the required parameter 'payment_request_id' is set
        if ($payment_request_id === null || (is_array($payment_request_id) && count($payment_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request_id when calling paymentRequestsGetPaymentRequest'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payment-requests/{paymentRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentRequestId' . '}',
                ObjectSerializer::toPathValue($payment_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentRequestsGetPaymentRequests
     *
     * Get payment requests
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaymentRequestData[]|\OpenAPI\Client\Model\ProblemDetails
     */
    public function paymentRequestsGetPaymentRequests($store_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequests'][0])
    {
        list($response) = $this->paymentRequestsGetPaymentRequestsWithHttpInfo($store_id, $contentType);
        return $response;
    }

    /**
     * Operation paymentRequestsGetPaymentRequestsWithHttpInfo
     *
     * Get payment requests
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaymentRequestData[]|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentRequestsGetPaymentRequestsWithHttpInfo($store_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequests'][0])
    {
        $request = $this->paymentRequestsGetPaymentRequestsRequest($store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PaymentRequestData[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PaymentRequestData[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentRequestData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation paymentRequestsGetPaymentRequestsAsync
     *
     * Get payment requests
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsGetPaymentRequestsAsync($store_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequests'][0])
    {
        return $this->paymentRequestsGetPaymentRequestsAsyncWithHttpInfo($store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentRequestsGetPaymentRequestsAsyncWithHttpInfo
     *
     * Get payment requests
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsGetPaymentRequestsAsyncWithHttpInfo($store_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequests'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaymentRequestData[]';
        $request = $this->paymentRequestsGetPaymentRequestsRequest($store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentRequestsGetPaymentRequests'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsGetPaymentRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentRequestsGetPaymentRequestsRequest($store_id, string $contentType = self::contentTypes['paymentRequestsGetPaymentRequests'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling paymentRequestsGetPaymentRequests'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payment-requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentRequestsPay
     *
     * Create a new invoice for the payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to create (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestsPayRequest|null $payment_requests_pay_request Invoice creation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsPay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]|\OpenAPI\Client\Model\ProblemDetails
     */
    public function paymentRequestsPay($store_id, $payment_request_id, $payment_requests_pay_request = null, string $contentType = self::contentTypes['paymentRequestsPay'][0])
    {
        list($response) = $this->paymentRequestsPayWithHttpInfo($store_id, $payment_request_id, $payment_requests_pay_request, $contentType);
        return $response;
    }

    /**
     * Operation paymentRequestsPayWithHttpInfo
     *
     * Create a new invoice for the payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to create (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestsPayRequest|null $payment_requests_pay_request Invoice creation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsPay'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentRequestsPayWithHttpInfo($store_id, $payment_request_id, $payment_requests_pay_request = null, string $contentType = self::contentTypes['paymentRequestsPay'][0])
    {
        $request = $this->paymentRequestsPayRequest($store_id, $payment_request_id, $payment_requests_pay_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceData',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation paymentRequestsPayAsync
     *
     * Create a new invoice for the payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to create (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestsPayRequest|null $payment_requests_pay_request Invoice creation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsPay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsPayAsync($store_id, $payment_request_id, $payment_requests_pay_request = null, string $contentType = self::contentTypes['paymentRequestsPay'][0])
    {
        return $this->paymentRequestsPayAsyncWithHttpInfo($store_id, $payment_request_id, $payment_requests_pay_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentRequestsPayAsyncWithHttpInfo
     *
     * Create a new invoice for the payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to create (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestsPayRequest|null $payment_requests_pay_request Invoice creation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsPay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsPayAsyncWithHttpInfo($store_id, $payment_request_id, $payment_requests_pay_request = null, string $contentType = self::contentTypes['paymentRequestsPay'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceData';
        $request = $this->paymentRequestsPayRequest($store_id, $payment_request_id, $payment_requests_pay_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentRequestsPay'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to create (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestsPayRequest|null $payment_requests_pay_request Invoice creation request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsPay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentRequestsPayRequest($store_id, $payment_request_id, $payment_requests_pay_request = null, string $contentType = self::contentTypes['paymentRequestsPay'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling paymentRequestsPay'
            );
        }

        // verify the required parameter 'payment_request_id' is set
        if ($payment_request_id === null || (is_array($payment_request_id) && count($payment_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request_id when calling paymentRequestsPay'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/payment-requests/{paymentRequestId}/pay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentRequestId' . '}',
                ObjectSerializer::toPathValue($payment_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment_requests_pay_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment_requests_pay_request));
            } else {
                $httpBody = $payment_requests_pay_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentRequestsUpdatePaymentRequest
     *
     * Update payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to update (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsUpdatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaymentRequestData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[]
     */
    public function paymentRequestsUpdatePaymentRequest($store_id, $payment_request_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsUpdatePaymentRequest'][0])
    {
        list($response) = $this->paymentRequestsUpdatePaymentRequestWithHttpInfo($store_id, $payment_request_id, $payment_request_base_data, $contentType);
        return $response;
    }

    /**
     * Operation paymentRequestsUpdatePaymentRequestWithHttpInfo
     *
     * Update payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to update (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsUpdatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaymentRequestData|\OpenAPI\Client\Model\ValidationProblemDetailsInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentRequestsUpdatePaymentRequestWithHttpInfo($store_id, $payment_request_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsUpdatePaymentRequest'][0])
    {
        $request = $this->paymentRequestsUpdatePaymentRequestRequest($store_id, $payment_request_id, $payment_request_base_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\PaymentRequestData',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\PaymentRequestData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentRequestData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ValidationProblemDetailsInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation paymentRequestsUpdatePaymentRequestAsync
     *
     * Update payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to update (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsUpdatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsUpdatePaymentRequestAsync($store_id, $payment_request_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsUpdatePaymentRequest'][0])
    {
        return $this->paymentRequestsUpdatePaymentRequestAsyncWithHttpInfo($store_id, $payment_request_id, $payment_request_base_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentRequestsUpdatePaymentRequestAsyncWithHttpInfo
     *
     * Update payment request
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to update (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsUpdatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentRequestsUpdatePaymentRequestAsyncWithHttpInfo($store_id, $payment_request_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsUpdatePaymentRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaymentRequestData';
        $request = $this->paymentRequestsUpdatePaymentRequestRequest($store_id, $payment_request_id, $payment_request_base_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentRequestsUpdatePaymentRequest'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $payment_request_id The payment request to update (required)
     * @param  \OpenAPI\Client\Model\PaymentRequestBaseData $payment_request_base_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentRequestsUpdatePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentRequestsUpdatePaymentRequestRequest($store_id, $payment_request_id, $payment_request_base_data, string $contentType = self::contentTypes['paymentRequestsUpdatePaymentRequest'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling paymentRequestsUpdatePaymentRequest'
            );
        }

        // verify the required parameter 'payment_request_id' is set
        if ($payment_request_id === null || (is_array($payment_request_id) && count($payment_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request_id when calling paymentRequestsUpdatePaymentRequest'
            );
        }

        // verify the required parameter 'payment_request_base_data' is set
        if ($payment_request_base_data === null || (is_array($payment_request_base_data) && count($payment_request_base_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_request_base_data when calling paymentRequestsUpdatePaymentRequest'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payment-requests/{paymentRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentRequestId' . '}',
                ObjectSerializer::toPathValue($payment_request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment_request_base_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment_request_base_data));
            } else {
                $httpBody = $payment_request_base_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
