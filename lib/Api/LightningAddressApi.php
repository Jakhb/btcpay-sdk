<?php
/**
 * LightningAddressApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LightningAddressApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LightningAddressApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'storeLightningAddressesAddOrUpdateStoreLightningAddress' => [
            'application/json',
        ],
        'storeLightningAddressesGetStoreLightningAddress' => [
            'application/json',
        ],
        'storeLightningAddressesGetStoreLightningAddresses' => [
            'application/json',
        ],
        'storeLightningAddressesRemoveStoreLightningAddress' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation storeLightningAddressesAddOrUpdateStoreLightningAddress
     *
     * Add or update store configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username the lightning address username (required)
     * @param  \OpenAPI\Client\Model\LightningAddressData $lightning_address_data lightning_address_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LightningAddressData
     */
    public function storeLightningAddressesAddOrUpdateStoreLightningAddress($store_id, $username, $lightning_address_data, string $contentType = self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'][0])
    {
        list($response) = $this->storeLightningAddressesAddOrUpdateStoreLightningAddressWithHttpInfo($store_id, $username, $lightning_address_data, $contentType);
        return $response;
    }

    /**
     * Operation storeLightningAddressesAddOrUpdateStoreLightningAddressWithHttpInfo
     *
     * Add or update store configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username the lightning address username (required)
     * @param  \OpenAPI\Client\Model\LightningAddressData $lightning_address_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LightningAddressData, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeLightningAddressesAddOrUpdateStoreLightningAddressWithHttpInfo($store_id, $username, $lightning_address_data, string $contentType = self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'][0])
    {
        $request = $this->storeLightningAddressesAddOrUpdateStoreLightningAddressRequest($store_id, $username, $lightning_address_data, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\LightningAddressData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\LightningAddressData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LightningAddressData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storeLightningAddressesAddOrUpdateStoreLightningAddressAsync
     *
     * Add or update store configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username the lightning address username (required)
     * @param  \OpenAPI\Client\Model\LightningAddressData $lightning_address_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeLightningAddressesAddOrUpdateStoreLightningAddressAsync($store_id, $username, $lightning_address_data, string $contentType = self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'][0])
    {
        return $this->storeLightningAddressesAddOrUpdateStoreLightningAddressAsyncWithHttpInfo($store_id, $username, $lightning_address_data, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeLightningAddressesAddOrUpdateStoreLightningAddressAsyncWithHttpInfo
     *
     * Add or update store configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username the lightning address username (required)
     * @param  \OpenAPI\Client\Model\LightningAddressData $lightning_address_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeLightningAddressesAddOrUpdateStoreLightningAddressAsyncWithHttpInfo($store_id, $username, $lightning_address_data, string $contentType = self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LightningAddressData';
        $request = $this->storeLightningAddressesAddOrUpdateStoreLightningAddressRequest($store_id, $username, $lightning_address_data, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeLightningAddressesAddOrUpdateStoreLightningAddress'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username the lightning address username (required)
     * @param  \OpenAPI\Client\Model\LightningAddressData $lightning_address_data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storeLightningAddressesAddOrUpdateStoreLightningAddressRequest($store_id, $username, $lightning_address_data, string $contentType = self::contentTypes['storeLightningAddressesAddOrUpdateStoreLightningAddress'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeLightningAddressesAddOrUpdateStoreLightningAddress'
            );
        }

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling storeLightningAddressesAddOrUpdateStoreLightningAddress'
            );
        }

        // verify the required parameter 'lightning_address_data' is set
        if ($lightning_address_data === null || (is_array($lightning_address_data) && count($lightning_address_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lightning_address_data when calling storeLightningAddressesAddOrUpdateStoreLightningAddress'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/lightning-addresses/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($lightning_address_data)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($lightning_address_data));
            } else {
                $httpBody = $lightning_address_data;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeLightningAddressesGetStoreLightningAddress
     *
     * Get store configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LightningAddressData
     */
    public function storeLightningAddressesGetStoreLightningAddress($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddress'][0])
    {
        list($response) = $this->storeLightningAddressesGetStoreLightningAddressWithHttpInfo($store_id, $username, $contentType);
        return $response;
    }

    /**
     * Operation storeLightningAddressesGetStoreLightningAddressWithHttpInfo
     *
     * Get store configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LightningAddressData, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeLightningAddressesGetStoreLightningAddressWithHttpInfo($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddress'][0])
    {
        $request = $this->storeLightningAddressesGetStoreLightningAddressRequest($store_id, $username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\LightningAddressData',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\LightningAddressData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LightningAddressData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storeLightningAddressesGetStoreLightningAddressAsync
     *
     * Get store configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeLightningAddressesGetStoreLightningAddressAsync($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddress'][0])
    {
        return $this->storeLightningAddressesGetStoreLightningAddressAsyncWithHttpInfo($store_id, $username, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeLightningAddressesGetStoreLightningAddressAsyncWithHttpInfo
     *
     * Get store configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeLightningAddressesGetStoreLightningAddressAsyncWithHttpInfo($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddress'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LightningAddressData';
        $request = $this->storeLightningAddressesGetStoreLightningAddressRequest($store_id, $username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeLightningAddressesGetStoreLightningAddress'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storeLightningAddressesGetStoreLightningAddressRequest($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddress'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeLightningAddressesGetStoreLightningAddress'
            );
        }

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling storeLightningAddressesGetStoreLightningAddress'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/lightning-addresses/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeLightningAddressesGetStoreLightningAddresses
     *
     * Get store configured lightning addresses
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LightningAddressData[]
     */
    public function storeLightningAddressesGetStoreLightningAddresses($store_id, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'][0])
    {
        list($response) = $this->storeLightningAddressesGetStoreLightningAddressesWithHttpInfo($store_id, $contentType);
        return $response;
    }

    /**
     * Operation storeLightningAddressesGetStoreLightningAddressesWithHttpInfo
     *
     * Get store configured lightning addresses
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LightningAddressData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function storeLightningAddressesGetStoreLightningAddressesWithHttpInfo($store_id, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'][0])
    {
        $request = $this->storeLightningAddressesGetStoreLightningAddressesRequest($store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\LightningAddressData[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\LightningAddressData[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LightningAddressData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storeLightningAddressesGetStoreLightningAddressesAsync
     *
     * Get store configured lightning addresses
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeLightningAddressesGetStoreLightningAddressesAsync($store_id, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'][0])
    {
        return $this->storeLightningAddressesGetStoreLightningAddressesAsyncWithHttpInfo($store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeLightningAddressesGetStoreLightningAddressesAsyncWithHttpInfo
     *
     * Get store configured lightning addresses
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeLightningAddressesGetStoreLightningAddressesAsyncWithHttpInfo($store_id, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LightningAddressData[]';
        $request = $this->storeLightningAddressesGetStoreLightningAddressesRequest($store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeLightningAddressesGetStoreLightningAddresses'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storeLightningAddressesGetStoreLightningAddressesRequest($store_id, string $contentType = self::contentTypes['storeLightningAddressesGetStoreLightningAddresses'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeLightningAddressesGetStoreLightningAddresses'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/lightning-addresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeLightningAddressesRemoveStoreLightningAddress
     *
     * Remove configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function storeLightningAddressesRemoveStoreLightningAddress($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'][0])
    {
        $this->storeLightningAddressesRemoveStoreLightningAddressWithHttpInfo($store_id, $username, $contentType);
    }

    /**
     * Operation storeLightningAddressesRemoveStoreLightningAddressWithHttpInfo
     *
     * Remove configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeLightningAddressesRemoveStoreLightningAddressWithHttpInfo($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'][0])
    {
        $request = $this->storeLightningAddressesRemoveStoreLightningAddressRequest($store_id, $username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation storeLightningAddressesRemoveStoreLightningAddressAsync
     *
     * Remove configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeLightningAddressesRemoveStoreLightningAddressAsync($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'][0])
    {
        return $this->storeLightningAddressesRemoveStoreLightningAddressAsyncWithHttpInfo($store_id, $username, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeLightningAddressesRemoveStoreLightningAddressAsyncWithHttpInfo
     *
     * Remove configured lightning address
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeLightningAddressesRemoveStoreLightningAddressAsyncWithHttpInfo($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'][0])
    {
        $returnType = '';
        $request = $this->storeLightningAddressesRemoveStoreLightningAddressRequest($store_id, $username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeLightningAddressesRemoveStoreLightningAddress'
     *
     * @param  string $store_id The store ID (required)
     * @param  string $username The lightning address username (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storeLightningAddressesRemoveStoreLightningAddressRequest($store_id, $username, string $contentType = self::contentTypes['storeLightningAddressesRemoveStoreLightningAddress'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeLightningAddressesRemoveStoreLightningAddress'
            );
        }

        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling storeLightningAddressesRemoveStoreLightningAddress'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/lightning-addresses/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
