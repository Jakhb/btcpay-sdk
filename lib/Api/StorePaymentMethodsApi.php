<?php
/**
 * StorePaymentMethodsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StorePaymentMethodsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StorePaymentMethodsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'storePaymentMethodsDeleteStorePaymentMethod' => [
            'application/json',
        ],
        'storePaymentMethodsGetStorePaymentMethod' => [
            'application/json',
        ],
        'storePaymentMethodsGetStorePaymentMethods' => [
            'application/json',
        ],
        'storePaymentMethodsUpdateStorePaymentMethod' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation storePaymentMethodsDeleteStorePaymentMethod
     *
     * Delete store&#39;s payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function storePaymentMethodsDeleteStorePaymentMethod($payment_method_id, $store_id, string $contentType = self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'][0])
    {
        $this->storePaymentMethodsDeleteStorePaymentMethodWithHttpInfo($payment_method_id, $store_id, $contentType);
    }

    /**
     * Operation storePaymentMethodsDeleteStorePaymentMethodWithHttpInfo
     *
     * Delete store&#39;s payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function storePaymentMethodsDeleteStorePaymentMethodWithHttpInfo($payment_method_id, $store_id, string $contentType = self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'][0])
    {
        $request = $this->storePaymentMethodsDeleteStorePaymentMethodRequest($payment_method_id, $store_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storePaymentMethodsDeleteStorePaymentMethodAsync
     *
     * Delete store&#39;s payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentMethodsDeleteStorePaymentMethodAsync($payment_method_id, $store_id, string $contentType = self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'][0])
    {
        return $this->storePaymentMethodsDeleteStorePaymentMethodAsyncWithHttpInfo($payment_method_id, $store_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storePaymentMethodsDeleteStorePaymentMethodAsyncWithHttpInfo
     *
     * Delete store&#39;s payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentMethodsDeleteStorePaymentMethodAsyncWithHttpInfo($payment_method_id, $store_id, string $contentType = self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'][0])
    {
        $returnType = '';
        $request = $this->storePaymentMethodsDeleteStorePaymentMethodRequest($payment_method_id, $store_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storePaymentMethodsDeleteStorePaymentMethod'
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storePaymentMethodsDeleteStorePaymentMethodRequest($payment_method_id, $store_id, string $contentType = self::contentTypes['storePaymentMethodsDeleteStorePaymentMethod'][0])
    {

        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling storePaymentMethodsDeleteStorePaymentMethod'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storePaymentMethodsDeleteStorePaymentMethod'
            );
        }


        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storePaymentMethodsGetStorePaymentMethod
     *
     * Get store payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenericPaymentMethodData|\OpenAPI\Client\Model\ProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function storePaymentMethodsGetStorePaymentMethod($payment_method_id, $store_id, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethod'][0])
    {
        list($response) = $this->storePaymentMethodsGetStorePaymentMethodWithHttpInfo($payment_method_id, $store_id, $include_config, $contentType);
        return $response;
    }

    /**
     * Operation storePaymentMethodsGetStorePaymentMethodWithHttpInfo
     *
     * Get store payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenericPaymentMethodData|\OpenAPI\Client\Model\ProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storePaymentMethodsGetStorePaymentMethodWithHttpInfo($payment_method_id, $store_id, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethod'][0])
    {
        $request = $this->storePaymentMethodsGetStorePaymentMethodRequest($payment_method_id, $store_id, $include_config, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GenericPaymentMethodData',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GenericPaymentMethodData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenericPaymentMethodData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storePaymentMethodsGetStorePaymentMethodAsync
     *
     * Get store payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentMethodsGetStorePaymentMethodAsync($payment_method_id, $store_id, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethod'][0])
    {
        return $this->storePaymentMethodsGetStorePaymentMethodAsyncWithHttpInfo($payment_method_id, $store_id, $include_config, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storePaymentMethodsGetStorePaymentMethodAsyncWithHttpInfo
     *
     * Get store payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentMethodsGetStorePaymentMethodAsyncWithHttpInfo($payment_method_id, $store_id, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethod'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GenericPaymentMethodData';
        $request = $this->storePaymentMethodsGetStorePaymentMethodRequest($payment_method_id, $store_id, $include_config, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storePaymentMethodsGetStorePaymentMethod'
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storePaymentMethodsGetStorePaymentMethodRequest($payment_method_id, $store_id, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethod'][0])
    {

        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling storePaymentMethodsGetStorePaymentMethod'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storePaymentMethodsGetStorePaymentMethod'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_config,
            'includeConfig', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storePaymentMethodsGetStorePaymentMethods
     *
     * Get store payment methods
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $only_enabled Fetch payment methods that are enabled/disabled only (optional)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethods'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenericPaymentMethodData[]|\OpenAPI\Client\Model\ProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function storePaymentMethodsGetStorePaymentMethods($store_id, $only_enabled = null, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethods'][0])
    {
        list($response) = $this->storePaymentMethodsGetStorePaymentMethodsWithHttpInfo($store_id, $only_enabled, $include_config, $contentType);
        return $response;
    }

    /**
     * Operation storePaymentMethodsGetStorePaymentMethodsWithHttpInfo
     *
     * Get store payment methods
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $only_enabled Fetch payment methods that are enabled/disabled only (optional)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethods'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenericPaymentMethodData[]|\OpenAPI\Client\Model\ProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storePaymentMethodsGetStorePaymentMethodsWithHttpInfo($store_id, $only_enabled = null, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethods'][0])
    {
        $request = $this->storePaymentMethodsGetStorePaymentMethodsRequest($store_id, $only_enabled, $include_config, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GenericPaymentMethodData[]',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GenericPaymentMethodData[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenericPaymentMethodData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storePaymentMethodsGetStorePaymentMethodsAsync
     *
     * Get store payment methods
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $only_enabled Fetch payment methods that are enabled/disabled only (optional)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentMethodsGetStorePaymentMethodsAsync($store_id, $only_enabled = null, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethods'][0])
    {
        return $this->storePaymentMethodsGetStorePaymentMethodsAsyncWithHttpInfo($store_id, $only_enabled, $include_config, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storePaymentMethodsGetStorePaymentMethodsAsyncWithHttpInfo
     *
     * Get store payment methods
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $only_enabled Fetch payment methods that are enabled/disabled only (optional)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentMethodsGetStorePaymentMethodsAsyncWithHttpInfo($store_id, $only_enabled = null, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethods'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GenericPaymentMethodData[]';
        $request = $this->storePaymentMethodsGetStorePaymentMethodsRequest($store_id, $only_enabled, $include_config, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storePaymentMethodsGetStorePaymentMethods'
     *
     * @param  string $store_id The store ID (required)
     * @param  bool|null $only_enabled Fetch payment methods that are enabled/disabled only (optional)
     * @param  bool|null $include_config Fetch the config of the payment methods, if &#x60;true&#x60;, the permission &#x60;btcpay.store.canmodifystoresettings&#x60; is required. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsGetStorePaymentMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storePaymentMethodsGetStorePaymentMethodsRequest($store_id, $only_enabled = null, $include_config = null, string $contentType = self::contentTypes['storePaymentMethodsGetStorePaymentMethods'][0])
    {

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storePaymentMethodsGetStorePaymentMethods'
            );
        }




        $resourcePath = '/api/v1/stores/{storeId}/payment-methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_enabled,
            'onlyEnabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_config,
            'includeConfig', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storePaymentMethodsUpdateStorePaymentMethod
     *
     * Update store&#39;s payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdatePaymentMethodConfig|null $update_payment_method_config update_payment_method_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenericPaymentMethodData|\OpenAPI\Client\Model\ProblemDetails|\OpenAPI\Client\Model\ProblemDetails
     */
    public function storePaymentMethodsUpdateStorePaymentMethod($payment_method_id, $store_id, $update_payment_method_config = null, string $contentType = self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'][0])
    {
        list($response) = $this->storePaymentMethodsUpdateStorePaymentMethodWithHttpInfo($payment_method_id, $store_id, $update_payment_method_config, $contentType);
        return $response;
    }

    /**
     * Operation storePaymentMethodsUpdateStorePaymentMethodWithHttpInfo
     *
     * Update store&#39;s payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdatePaymentMethodConfig|null $update_payment_method_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenericPaymentMethodData|\OpenAPI\Client\Model\ProblemDetails|\OpenAPI\Client\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function storePaymentMethodsUpdateStorePaymentMethodWithHttpInfo($payment_method_id, $store_id, $update_payment_method_config = null, string $contentType = self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'][0])
    {
        $request = $this->storePaymentMethodsUpdateStorePaymentMethodRequest($payment_method_id, $store_id, $update_payment_method_config, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\GenericPaymentMethodData',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\GenericPaymentMethodData',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenericPaymentMethodData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation storePaymentMethodsUpdateStorePaymentMethodAsync
     *
     * Update store&#39;s payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdatePaymentMethodConfig|null $update_payment_method_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentMethodsUpdateStorePaymentMethodAsync($payment_method_id, $store_id, $update_payment_method_config = null, string $contentType = self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'][0])
    {
        return $this->storePaymentMethodsUpdateStorePaymentMethodAsyncWithHttpInfo($payment_method_id, $store_id, $update_payment_method_config, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storePaymentMethodsUpdateStorePaymentMethodAsyncWithHttpInfo
     *
     * Update store&#39;s payment method
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdatePaymentMethodConfig|null $update_payment_method_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storePaymentMethodsUpdateStorePaymentMethodAsyncWithHttpInfo($payment_method_id, $store_id, $update_payment_method_config = null, string $contentType = self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GenericPaymentMethodData';
        $request = $this->storePaymentMethodsUpdateStorePaymentMethodRequest($payment_method_id, $store_id, $update_payment_method_config, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storePaymentMethodsUpdateStorePaymentMethod'
     *
     * @param  string $payment_method_id The payment method id of the payment method to update (required)
     * @param  string $store_id The store ID (required)
     * @param  \OpenAPI\Client\Model\UpdatePaymentMethodConfig|null $update_payment_method_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function storePaymentMethodsUpdateStorePaymentMethodRequest($payment_method_id, $store_id, $update_payment_method_config = null, string $contentType = self::contentTypes['storePaymentMethodsUpdateStorePaymentMethod'][0])
    {

        // verify the required parameter 'payment_method_id' is set
        if ($payment_method_id === null || (is_array($payment_method_id) && count($payment_method_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_method_id when calling storePaymentMethodsUpdateStorePaymentMethod'
            );
        }

        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storePaymentMethodsUpdateStorePaymentMethod'
            );
        }



        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/{paymentMethodId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payment_method_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentMethodId' . '}',
                ObjectSerializer::toPathValue($payment_method_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_payment_method_config)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_payment_method_config));
            } else {
                $httpBody = $update_payment_method_config;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
