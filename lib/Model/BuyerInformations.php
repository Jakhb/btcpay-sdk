<?php
/**
 * BuyerInformations
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BuyerInformations Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BuyerInformations implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Buyer_informations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'buyer_name' => 'string',
        'buyer_email' => 'string',
        'buyer_country' => 'string',
        'buyer_zip' => 'string',
        'buyer_state' => 'string',
        'buyer_city' => 'string',
        'buyer_address1' => 'string',
        'buyer_address2' => 'string',
        'buyer_phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'buyer_name' => null,
        'buyer_email' => null,
        'buyer_country' => null,
        'buyer_zip' => null,
        'buyer_state' => null,
        'buyer_city' => null,
        'buyer_address1' => null,
        'buyer_address2' => null,
        'buyer_phone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'buyer_name' => true,
        'buyer_email' => true,
        'buyer_country' => true,
        'buyer_zip' => true,
        'buyer_state' => true,
        'buyer_city' => true,
        'buyer_address1' => true,
        'buyer_address2' => true,
        'buyer_phone' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyer_name' => 'buyerName',
        'buyer_email' => 'buyerEmail',
        'buyer_country' => 'buyerCountry',
        'buyer_zip' => 'buyerZip',
        'buyer_state' => 'buyerState',
        'buyer_city' => 'buyerCity',
        'buyer_address1' => 'buyerAddress1',
        'buyer_address2' => 'buyerAddress2',
        'buyer_phone' => 'buyerPhone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyer_name' => 'setBuyerName',
        'buyer_email' => 'setBuyerEmail',
        'buyer_country' => 'setBuyerCountry',
        'buyer_zip' => 'setBuyerZip',
        'buyer_state' => 'setBuyerState',
        'buyer_city' => 'setBuyerCity',
        'buyer_address1' => 'setBuyerAddress1',
        'buyer_address2' => 'setBuyerAddress2',
        'buyer_phone' => 'setBuyerPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyer_name' => 'getBuyerName',
        'buyer_email' => 'getBuyerEmail',
        'buyer_country' => 'getBuyerCountry',
        'buyer_zip' => 'getBuyerZip',
        'buyer_state' => 'getBuyerState',
        'buyer_city' => 'getBuyerCity',
        'buyer_address1' => 'getBuyerAddress1',
        'buyer_address2' => 'getBuyerAddress2',
        'buyer_phone' => 'getBuyerPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('buyer_name', $data ?? [], null);
        $this->setIfExists('buyer_email', $data ?? [], null);
        $this->setIfExists('buyer_country', $data ?? [], null);
        $this->setIfExists('buyer_zip', $data ?? [], null);
        $this->setIfExists('buyer_state', $data ?? [], null);
        $this->setIfExists('buyer_city', $data ?? [], null);
        $this->setIfExists('buyer_address1', $data ?? [], null);
        $this->setIfExists('buyer_address2', $data ?? [], null);
        $this->setIfExists('buyer_phone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyer_name
     *
     * @return string|null
     */
    public function getBuyerName()
    {
        return $this->container['buyer_name'];
    }

    /**
     * Sets buyer_name
     *
     * @param string|null $buyer_name Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerName($buyer_name)
    {
        if (is_null($buyer_name)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_name'] = $buyer_name;

        return $this;
    }

    /**
     * Gets buyer_email
     *
     * @return string|null
     */
    public function getBuyerEmail()
    {
        return $this->container['buyer_email'];
    }

    /**
     * Sets buyer_email
     *
     * @param string|null $buyer_email Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerEmail($buyer_email)
    {
        if (is_null($buyer_email)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_email'] = $buyer_email;

        return $this;
    }

    /**
     * Gets buyer_country
     *
     * @return string|null
     */
    public function getBuyerCountry()
    {
        return $this->container['buyer_country'];
    }

    /**
     * Sets buyer_country
     *
     * @param string|null $buyer_country Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerCountry($buyer_country)
    {
        if (is_null($buyer_country)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_country'] = $buyer_country;

        return $this;
    }

    /**
     * Gets buyer_zip
     *
     * @return string|null
     */
    public function getBuyerZip()
    {
        return $this->container['buyer_zip'];
    }

    /**
     * Sets buyer_zip
     *
     * @param string|null $buyer_zip Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerZip($buyer_zip)
    {
        if (is_null($buyer_zip)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_zip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_zip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_zip'] = $buyer_zip;

        return $this;
    }

    /**
     * Gets buyer_state
     *
     * @return string|null
     */
    public function getBuyerState()
    {
        return $this->container['buyer_state'];
    }

    /**
     * Sets buyer_state
     *
     * @param string|null $buyer_state Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerState($buyer_state)
    {
        if (is_null($buyer_state)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_state'] = $buyer_state;

        return $this;
    }

    /**
     * Gets buyer_city
     *
     * @return string|null
     */
    public function getBuyerCity()
    {
        return $this->container['buyer_city'];
    }

    /**
     * Sets buyer_city
     *
     * @param string|null $buyer_city Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerCity($buyer_city)
    {
        if (is_null($buyer_city)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_city'] = $buyer_city;

        return $this;
    }

    /**
     * Gets buyer_address1
     *
     * @return string|null
     */
    public function getBuyerAddress1()
    {
        return $this->container['buyer_address1'];
    }

    /**
     * Sets buyer_address1
     *
     * @param string|null $buyer_address1 Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerAddress1($buyer_address1)
    {
        if (is_null($buyer_address1)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_address1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_address1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_address1'] = $buyer_address1;

        return $this;
    }

    /**
     * Gets buyer_address2
     *
     * @return string|null
     */
    public function getBuyerAddress2()
    {
        return $this->container['buyer_address2'];
    }

    /**
     * Sets buyer_address2
     *
     * @param string|null $buyer_address2 Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerAddress2($buyer_address2)
    {
        if (is_null($buyer_address2)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_address2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_address2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_address2'] = $buyer_address2;

        return $this;
    }

    /**
     * Gets buyer_phone
     *
     * @return string|null
     */
    public function getBuyerPhone()
    {
        return $this->container['buyer_phone'];
    }

    /**
     * Sets buyer_phone
     *
     * @param string|null $buyer_phone Visible in the invoice details view and in the BitPay API-compatible endpoints.
     *
     * @return self
     */
    public function setBuyerPhone($buyer_phone)
    {
        if (is_null($buyer_phone)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_phone'] = $buyer_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


