<?php
/**
 * CheckoutOptions
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CheckoutOptions Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckoutOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckoutOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'speed_policy' => '\OpenAPI\Client\Model\SpeedPolicy',
        'payment_methods' => 'string[]',
        'default_payment_method' => 'string',
        'lazy_payment_methods' => 'bool',
        'expiration_minutes' => 'mixed',
        'monitoring_minutes' => 'mixed',
        'payment_tolerance' => 'float',
        'redirect_url' => 'string',
        'redirect_automatically' => 'bool',
        'default_language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'speed_policy' => null,
        'payment_methods' => null,
        'default_payment_method' => null,
        'lazy_payment_methods' => null,
        'expiration_minutes' => null,
        'monitoring_minutes' => null,
        'payment_tolerance' => 'double',
        'redirect_url' => null,
        'redirect_automatically' => null,
        'default_language' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'speed_policy' => true,
        'payment_methods' => true,
        'default_payment_method' => true,
        'lazy_payment_methods' => true,
        'expiration_minutes' => true,
        'monitoring_minutes' => true,
        'payment_tolerance' => true,
        'redirect_url' => true,
        'redirect_automatically' => true,
        'default_language' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'speed_policy' => 'speedPolicy',
        'payment_methods' => 'paymentMethods',
        'default_payment_method' => 'defaultPaymentMethod',
        'lazy_payment_methods' => 'lazyPaymentMethods',
        'expiration_minutes' => 'expirationMinutes',
        'monitoring_minutes' => 'monitoringMinutes',
        'payment_tolerance' => 'paymentTolerance',
        'redirect_url' => 'redirectURL',
        'redirect_automatically' => 'redirectAutomatically',
        'default_language' => 'defaultLanguage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'speed_policy' => 'setSpeedPolicy',
        'payment_methods' => 'setPaymentMethods',
        'default_payment_method' => 'setDefaultPaymentMethod',
        'lazy_payment_methods' => 'setLazyPaymentMethods',
        'expiration_minutes' => 'setExpirationMinutes',
        'monitoring_minutes' => 'setMonitoringMinutes',
        'payment_tolerance' => 'setPaymentTolerance',
        'redirect_url' => 'setRedirectUrl',
        'redirect_automatically' => 'setRedirectAutomatically',
        'default_language' => 'setDefaultLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'speed_policy' => 'getSpeedPolicy',
        'payment_methods' => 'getPaymentMethods',
        'default_payment_method' => 'getDefaultPaymentMethod',
        'lazy_payment_methods' => 'getLazyPaymentMethods',
        'expiration_minutes' => 'getExpirationMinutes',
        'monitoring_minutes' => 'getMonitoringMinutes',
        'payment_tolerance' => 'getPaymentTolerance',
        'redirect_url' => 'getRedirectUrl',
        'redirect_automatically' => 'getRedirectAutomatically',
        'default_language' => 'getDefaultLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('speed_policy', $data ?? [], null);
        $this->setIfExists('payment_methods', $data ?? [], null);
        $this->setIfExists('default_payment_method', $data ?? [], null);
        $this->setIfExists('lazy_payment_methods', $data ?? [], null);
        $this->setIfExists('expiration_minutes', $data ?? [], null);
        $this->setIfExists('monitoring_minutes', $data ?? [], null);
        $this->setIfExists('payment_tolerance', $data ?? [], 0.0);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('redirect_automatically', $data ?? [], null);
        $this->setIfExists('default_language', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['payment_tolerance']) && ($this->container['payment_tolerance'] > 100.0)) {
            $invalidProperties[] = "invalid value for 'payment_tolerance', must be smaller than or equal to 100.0.";
        }

        if (!is_null($this->container['payment_tolerance']) && ($this->container['payment_tolerance'] < 0.0)) {
            $invalidProperties[] = "invalid value for 'payment_tolerance', must be bigger than or equal to 0.0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets speed_policy
     *
     * @return \OpenAPI\Client\Model\SpeedPolicy|null
     */
    public function getSpeedPolicy()
    {
        return $this->container['speed_policy'];
    }

    /**
     * Sets speed_policy
     *
     * @param \OpenAPI\Client\Model\SpeedPolicy|null $speed_policy speed_policy
     *
     * @return self
     */
    public function setSpeedPolicy($speed_policy)
    {
        if (is_null($speed_policy)) {
            array_push($this->openAPINullablesSetToNull, 'speed_policy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('speed_policy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['speed_policy'] = $speed_policy;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return string[]|null
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param string[]|null $payment_methods A specific set of payment methods to use for this invoice (ie. BTC, BTC-LightningNetwork). By default, select all payment methods enabled in the store.
     *
     * @return self
     */
    public function setPaymentMethods($payment_methods)
    {
        if (is_null($payment_methods)) {
            array_push($this->openAPINullablesSetToNull, 'payment_methods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_methods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets default_payment_method
     *
     * @return string|null
     */
    public function getDefaultPaymentMethod()
    {
        return $this->container['default_payment_method'];
    }

    /**
     * Sets default_payment_method
     *
     * @param string|null $default_payment_method Default payment type for the invoice (e.g., BTC, BTC-LightningNetwork). Default payment method set for the store is used if this parameter is not specified.
     *
     * @return self
     */
    public function setDefaultPaymentMethod($default_payment_method)
    {
        if (is_null($default_payment_method)) {
            array_push($this->openAPINullablesSetToNull, 'default_payment_method');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_payment_method', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_payment_method'] = $default_payment_method;

        return $this;
    }

    /**
     * Gets lazy_payment_methods
     *
     * @return bool|null
     */
    public function getLazyPaymentMethods()
    {
        return $this->container['lazy_payment_methods'];
    }

    /**
     * Sets lazy_payment_methods
     *
     * @param bool|null $lazy_payment_methods If true, payment methods are enabled individually upon user interaction in the invoice. Default to store's settings'
     *
     * @return self
     */
    public function setLazyPaymentMethods($lazy_payment_methods)
    {
        if (is_null($lazy_payment_methods)) {
            array_push($this->openAPINullablesSetToNull, 'lazy_payment_methods');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lazy_payment_methods', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lazy_payment_methods'] = $lazy_payment_methods;

        return $this;
    }

    /**
     * Gets expiration_minutes
     *
     * @return mixed|null
     */
    public function getExpirationMinutes()
    {
        return $this->container['expiration_minutes'];
    }

    /**
     * Sets expiration_minutes
     *
     * @param mixed|null $expiration_minutes The number of minutes after which an invoice becomes expired. Defaults to the store's settings. (The default store settings is 15)
     *
     * @return self
     */
    public function setExpirationMinutes($expiration_minutes)
    {
        if (is_null($expiration_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'expiration_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiration_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiration_minutes'] = $expiration_minutes;

        return $this;
    }

    /**
     * Gets monitoring_minutes
     *
     * @return mixed|null
     */
    public function getMonitoringMinutes()
    {
        return $this->container['monitoring_minutes'];
    }

    /**
     * Sets monitoring_minutes
     *
     * @param mixed|null $monitoring_minutes The number of minutes after an invoice expired after which we are still monitoring for incoming payments. Defaults to the store's settings. (The default store settings is 1440, 1 day)
     *
     * @return self
     */
    public function setMonitoringMinutes($monitoring_minutes)
    {
        if (is_null($monitoring_minutes)) {
            array_push($this->openAPINullablesSetToNull, 'monitoring_minutes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('monitoring_minutes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['monitoring_minutes'] = $monitoring_minutes;

        return $this;
    }

    /**
     * Gets payment_tolerance
     *
     * @return float|null
     */
    public function getPaymentTolerance()
    {
        return $this->container['payment_tolerance'];
    }

    /**
     * Sets payment_tolerance
     *
     * @param float|null $payment_tolerance A percentage determining whether to count the invoice as paid when the invoice is paid within the specified margin of error. Defaults to the store's settings. (The default store settings is 0)
     *
     * @return self
     */
    public function setPaymentTolerance($payment_tolerance)
    {
        if (is_null($payment_tolerance)) {
            array_push($this->openAPINullablesSetToNull, 'payment_tolerance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_tolerance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($payment_tolerance) && ($payment_tolerance > 100.0)) {
            throw new \InvalidArgumentException('invalid value for $payment_tolerance when calling CheckoutOptions., must be smaller than or equal to 100.0.');
        }
        if (!is_null($payment_tolerance) && ($payment_tolerance < 0.0)) {
            throw new \InvalidArgumentException('invalid value for $payment_tolerance when calling CheckoutOptions., must be bigger than or equal to 0.0.');
        }

        $this->container['payment_tolerance'] = $payment_tolerance;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url When the customer has paid the invoice, the URL where the customer will be redirected when clicking on the `return to store` button. You can use placeholders `{InvoiceId}` or `{OrderId}` in the URL, BTCPay Server will replace those with this invoice `id` or `metadata.orderId` respectively.
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets redirect_automatically
     *
     * @return bool|null
     */
    public function getRedirectAutomatically()
    {
        return $this->container['redirect_automatically'];
    }

    /**
     * Sets redirect_automatically
     *
     * @param bool|null $redirect_automatically When the customer has paid the invoice, and a `redirectURL` is set, the checkout is redirected to `redirectURL` automatically if `redirectAutomatically` is true. Defaults to the store's settings. (The default store settings is false)
     *
     * @return self
     */
    public function setRedirectAutomatically($redirect_automatically)
    {
        if (is_null($redirect_automatically)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_automatically');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_automatically', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_automatically'] = $redirect_automatically;

        return $this;
    }

    /**
     * Gets default_language
     *
     * @return string|null
     */
    public function getDefaultLanguage()
    {
        return $this->container['default_language'];
    }

    /**
     * Sets default_language
     *
     * @param string|null $default_language The language code (eg. en-US, en, fr-FR...) of the language presented to your customer in the checkout page. BTCPay Server tries to match the best language available. If null or not set, will fallback on the store's default language. You can see the list of language codes with [this operation](#operation/langCodes).
     *
     * @return self
     */
    public function setDefaultLanguage($default_language)
    {
        if (is_null($default_language)) {
            array_push($this->openAPINullablesSetToNull, 'default_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_language'] = $default_language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


