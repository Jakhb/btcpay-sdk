<?php
/**
 * PointOfSaleAppRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PointOfSaleAppRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PointOfSaleAppRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PointOfSaleAppRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'app_name' => 'string',
        'store_id' => 'string',
        'created' => 'int',
        'app_type' => 'string',
        'archived' => 'bool',
        'title' => 'string',
        'description' => 'string',
        'default_view' => 'string',
        'show_items' => 'bool',
        'show_custom_amount' => 'bool',
        'show_discount' => 'bool',
        'show_search' => 'bool',
        'show_categories' => 'bool',
        'enable_tips' => 'bool',
        'currency' => 'string',
        'fixed_amount_pay_button_text' => 'string',
        'custom_amount_pay_button_text' => 'string',
        'tip_text' => 'string',
        'custom_tip_percentages' => 'float[]',
        'notification_url' => 'string',
        'redirect_url' => 'string',
        'redirect_automatically' => 'bool',
        'html_lang' => 'string',
        'html_meta_tags' => 'string',
        'form_id' => 'string',
        'template' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'app_name' => null,
        'store_id' => null,
        'created' => null,
        'app_type' => null,
        'archived' => null,
        'title' => null,
        'description' => null,
        'default_view' => null,
        'show_items' => null,
        'show_custom_amount' => null,
        'show_discount' => null,
        'show_search' => null,
        'show_categories' => null,
        'enable_tips' => null,
        'currency' => null,
        'fixed_amount_pay_button_text' => null,
        'custom_amount_pay_button_text' => null,
        'tip_text' => null,
        'custom_tip_percentages' => null,
        'notification_url' => null,
        'redirect_url' => null,
        'redirect_automatically' => null,
        'html_lang' => null,
        'html_meta_tags' => null,
        'form_id' => null,
        'template' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'app_name' => false,
        'store_id' => false,
        'created' => false,
        'app_type' => false,
        'archived' => true,
        'title' => true,
        'description' => true,
        'default_view' => true,
        'show_items' => true,
        'show_custom_amount' => true,
        'show_discount' => true,
        'show_search' => true,
        'show_categories' => true,
        'enable_tips' => true,
        'currency' => true,
        'fixed_amount_pay_button_text' => true,
        'custom_amount_pay_button_text' => true,
        'tip_text' => true,
        'custom_tip_percentages' => true,
        'notification_url' => true,
        'redirect_url' => true,
        'redirect_automatically' => true,
        'html_lang' => true,
        'html_meta_tags' => true,
        'form_id' => true,
        'template' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'app_name' => 'appName',
        'store_id' => 'storeId',
        'created' => 'created',
        'app_type' => 'appType',
        'archived' => 'archived',
        'title' => 'title',
        'description' => 'description',
        'default_view' => 'defaultView',
        'show_items' => 'showItems',
        'show_custom_amount' => 'showCustomAmount',
        'show_discount' => 'showDiscount',
        'show_search' => 'showSearch',
        'show_categories' => 'showCategories',
        'enable_tips' => 'enableTips',
        'currency' => 'currency',
        'fixed_amount_pay_button_text' => 'fixedAmountPayButtonText',
        'custom_amount_pay_button_text' => 'customAmountPayButtonText',
        'tip_text' => 'tipText',
        'custom_tip_percentages' => 'customTipPercentages',
        'notification_url' => 'notificationUrl',
        'redirect_url' => 'redirectUrl',
        'redirect_automatically' => 'redirectAutomatically',
        'html_lang' => 'htmlLang',
        'html_meta_tags' => 'htmlMetaTags',
        'form_id' => 'formId',
        'template' => 'template'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'app_name' => 'setAppName',
        'store_id' => 'setStoreId',
        'created' => 'setCreated',
        'app_type' => 'setAppType',
        'archived' => 'setArchived',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'default_view' => 'setDefaultView',
        'show_items' => 'setShowItems',
        'show_custom_amount' => 'setShowCustomAmount',
        'show_discount' => 'setShowDiscount',
        'show_search' => 'setShowSearch',
        'show_categories' => 'setShowCategories',
        'enable_tips' => 'setEnableTips',
        'currency' => 'setCurrency',
        'fixed_amount_pay_button_text' => 'setFixedAmountPayButtonText',
        'custom_amount_pay_button_text' => 'setCustomAmountPayButtonText',
        'tip_text' => 'setTipText',
        'custom_tip_percentages' => 'setCustomTipPercentages',
        'notification_url' => 'setNotificationUrl',
        'redirect_url' => 'setRedirectUrl',
        'redirect_automatically' => 'setRedirectAutomatically',
        'html_lang' => 'setHtmlLang',
        'html_meta_tags' => 'setHtmlMetaTags',
        'form_id' => 'setFormId',
        'template' => 'setTemplate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'app_name' => 'getAppName',
        'store_id' => 'getStoreId',
        'created' => 'getCreated',
        'app_type' => 'getAppType',
        'archived' => 'getArchived',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'default_view' => 'getDefaultView',
        'show_items' => 'getShowItems',
        'show_custom_amount' => 'getShowCustomAmount',
        'show_discount' => 'getShowDiscount',
        'show_search' => 'getShowSearch',
        'show_categories' => 'getShowCategories',
        'enable_tips' => 'getEnableTips',
        'currency' => 'getCurrency',
        'fixed_amount_pay_button_text' => 'getFixedAmountPayButtonText',
        'custom_amount_pay_button_text' => 'getCustomAmountPayButtonText',
        'tip_text' => 'getTipText',
        'custom_tip_percentages' => 'getCustomTipPercentages',
        'notification_url' => 'getNotificationUrl',
        'redirect_url' => 'getRedirectUrl',
        'redirect_automatically' => 'getRedirectAutomatically',
        'html_lang' => 'getHtmlLang',
        'html_meta_tags' => 'getHtmlMetaTags',
        'form_id' => 'getFormId',
        'template' => 'getTemplate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEFAULT_VIEW__STATIC = 'Static';
    public const DEFAULT_VIEW_CART = 'Cart';
    public const DEFAULT_VIEW_LIGHT = 'Light';
    public const DEFAULT_VIEW__PRINT = 'Print';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultViewAllowableValues()
    {
        return [
            self::DEFAULT_VIEW__STATIC,
            self::DEFAULT_VIEW_CART,
            self::DEFAULT_VIEW_LIGHT,
            self::DEFAULT_VIEW__PRINT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('app_name', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('app_type', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], false);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('default_view', $data ?? [], null);
        $this->setIfExists('show_items', $data ?? [], false);
        $this->setIfExists('show_custom_amount', $data ?? [], null);
        $this->setIfExists('show_discount', $data ?? [], false);
        $this->setIfExists('show_search', $data ?? [], true);
        $this->setIfExists('show_categories', $data ?? [], true);
        $this->setIfExists('enable_tips', $data ?? [], false);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('fixed_amount_pay_button_text', $data ?? [], null);
        $this->setIfExists('custom_amount_pay_button_text', $data ?? [], null);
        $this->setIfExists('tip_text', $data ?? [], null);
        $this->setIfExists('custom_tip_percentages', $data ?? [], null);
        $this->setIfExists('notification_url', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('redirect_automatically', $data ?? [], null);
        $this->setIfExists('html_lang', $data ?? [], null);
        $this->setIfExists('html_meta_tags', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDefaultViewAllowableValues();
        if (!is_null($this->container['default_view']) && !in_array($this->container['default_view'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_view', must be one of '%s'",
                $this->container['default_view'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Id of the app
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets app_name
     *
     * @return string|null
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     *
     * @param string|null $app_name Name given to the app when it was created
     *
     * @return self
     */
    public function setAppName($app_name)
    {
        if (is_null($app_name)) {
            throw new \InvalidArgumentException('non-nullable app_name cannot be null');
        }
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id Id of the store to which the app belongs
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int|null $created UNIX timestamp for when the app was created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets app_type
     *
     * @return string|null
     */
    public function getAppType()
    {
        return $this->container['app_type'];
    }

    /**
     * Sets app_type
     *
     * @param string|null $app_type Type of the app which was created
     *
     * @return self
     */
    public function setAppType($app_type)
    {
        if (is_null($app_type)) {
            throw new \InvalidArgumentException('non-nullable app_type cannot be null');
        }
        $this->container['app_type'] = $app_type;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived If true, the app does not appear in the apps list by default.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            array_push($this->openAPINullablesSetToNull, 'archived');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('archived', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Display title of the app
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description App description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets default_view
     *
     * @return string|null
     */
    public function getDefaultView()
    {
        return $this->container['default_view'];
    }

    /**
     * Sets default_view
     *
     * @param string|null $default_view App view type (e.g., static, cart, etc...)
     *
     * @return self
     */
    public function setDefaultView($default_view)
    {
        if (is_null($default_view)) {
            array_push($this->openAPINullablesSetToNull, 'default_view');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_view', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDefaultViewAllowableValues();
        if (!is_null($default_view) && !in_array($default_view, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_view', must be one of '%s'",
                    $default_view,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['default_view'] = $default_view;

        return $this;
    }

    /**
     * Gets show_items
     *
     * @return bool|null
     */
    public function getShowItems()
    {
        return $this->container['show_items'];
    }

    /**
     * Sets show_items
     *
     * @param bool|null $show_items Display item selection for keypad
     *
     * @return self
     */
    public function setShowItems($show_items)
    {
        if (is_null($show_items)) {
            array_push($this->openAPINullablesSetToNull, 'show_items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_items'] = $show_items;

        return $this;
    }

    /**
     * Gets show_custom_amount
     *
     * @return bool|null
     */
    public function getShowCustomAmount()
    {
        return $this->container['show_custom_amount'];
    }

    /**
     * Sets show_custom_amount
     *
     * @param bool|null $show_custom_amount Whether the option to enter a custom amount is shown
     *
     * @return self
     */
    public function setShowCustomAmount($show_custom_amount)
    {
        if (is_null($show_custom_amount)) {
            array_push($this->openAPINullablesSetToNull, 'show_custom_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_custom_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_custom_amount'] = $show_custom_amount;

        return $this;
    }

    /**
     * Gets show_discount
     *
     * @return bool|null
     */
    public function getShowDiscount()
    {
        return $this->container['show_discount'];
    }

    /**
     * Sets show_discount
     *
     * @param bool|null $show_discount Whether the option to enter a discount is shown
     *
     * @return self
     */
    public function setShowDiscount($show_discount)
    {
        if (is_null($show_discount)) {
            array_push($this->openAPINullablesSetToNull, 'show_discount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_discount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_discount'] = $show_discount;

        return $this;
    }

    /**
     * Gets show_search
     *
     * @return bool|null
     */
    public function getShowSearch()
    {
        return $this->container['show_search'];
    }

    /**
     * Sets show_search
     *
     * @param bool|null $show_search Display the search bar
     *
     * @return self
     */
    public function setShowSearch($show_search)
    {
        if (is_null($show_search)) {
            array_push($this->openAPINullablesSetToNull, 'show_search');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_search', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_search'] = $show_search;

        return $this;
    }

    /**
     * Gets show_categories
     *
     * @return bool|null
     */
    public function getShowCategories()
    {
        return $this->container['show_categories'];
    }

    /**
     * Sets show_categories
     *
     * @param bool|null $show_categories Display the list of categories
     *
     * @return self
     */
    public function setShowCategories($show_categories)
    {
        if (is_null($show_categories)) {
            array_push($this->openAPINullablesSetToNull, 'show_categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_categories'] = $show_categories;

        return $this;
    }

    /**
     * Gets enable_tips
     *
     * @return bool|null
     */
    public function getEnableTips()
    {
        return $this->container['enable_tips'];
    }

    /**
     * Sets enable_tips
     *
     * @param bool|null $enable_tips Whether the option to enter a tip is shown
     *
     * @return self
     */
    public function setEnableTips($enable_tips)
    {
        if (is_null($enable_tips)) {
            array_push($this->openAPINullablesSetToNull, 'enable_tips');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_tips', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_tips'] = $enable_tips;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency used for the app
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            array_push($this->openAPINullablesSetToNull, 'currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets fixed_amount_pay_button_text
     *
     * @return string|null
     */
    public function getFixedAmountPayButtonText()
    {
        return $this->container['fixed_amount_pay_button_text'];
    }

    /**
     * Sets fixed_amount_pay_button_text
     *
     * @param string|null $fixed_amount_pay_button_text Payment button text template for items with a set price
     *
     * @return self
     */
    public function setFixedAmountPayButtonText($fixed_amount_pay_button_text)
    {
        if (is_null($fixed_amount_pay_button_text)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_amount_pay_button_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_amount_pay_button_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixed_amount_pay_button_text'] = $fixed_amount_pay_button_text;

        return $this;
    }

    /**
     * Gets custom_amount_pay_button_text
     *
     * @return string|null
     */
    public function getCustomAmountPayButtonText()
    {
        return $this->container['custom_amount_pay_button_text'];
    }

    /**
     * Sets custom_amount_pay_button_text
     *
     * @param string|null $custom_amount_pay_button_text Payment button text which appears for items which allow user to input a custom amount
     *
     * @return self
     */
    public function setCustomAmountPayButtonText($custom_amount_pay_button_text)
    {
        if (is_null($custom_amount_pay_button_text)) {
            array_push($this->openAPINullablesSetToNull, 'custom_amount_pay_button_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_amount_pay_button_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_amount_pay_button_text'] = $custom_amount_pay_button_text;

        return $this;
    }

    /**
     * Gets tip_text
     *
     * @return string|null
     */
    public function getTipText()
    {
        return $this->container['tip_text'];
    }

    /**
     * Sets tip_text
     *
     * @param string|null $tip_text Prompt which appears next to the tip amount field if tipping is enabled
     *
     * @return self
     */
    public function setTipText($tip_text)
    {
        if (is_null($tip_text)) {
            array_push($this->openAPINullablesSetToNull, 'tip_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tip_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tip_text'] = $tip_text;

        return $this;
    }

    /**
     * Gets custom_tip_percentages
     *
     * @return float[]|null
     */
    public function getCustomTipPercentages()
    {
        return $this->container['custom_tip_percentages'];
    }

    /**
     * Sets custom_tip_percentages
     *
     * @param float[]|null $custom_tip_percentages Array of predefined tip percentage amounts
     *
     * @return self
     */
    public function setCustomTipPercentages($custom_tip_percentages)
    {
        if (is_null($custom_tip_percentages)) {
            array_push($this->openAPINullablesSetToNull, 'custom_tip_percentages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_tip_percentages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_tip_percentages'] = $custom_tip_percentages;

        return $this;
    }

    /**
     * Gets notification_url
     *
     * @return string|null
     */
    public function getNotificationUrl()
    {
        return $this->container['notification_url'];
    }

    /**
     * Sets notification_url
     *
     * @param string|null $notification_url Callback notification url to POST to once when invoice is paid for and once when there are enough blockchain confirmations
     *
     * @return self
     */
    public function setNotificationUrl($notification_url)
    {
        if (is_null($notification_url)) {
            array_push($this->openAPINullablesSetToNull, 'notification_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_url'] = $notification_url;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url URL user is redirected to once invoice is paid
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets redirect_automatically
     *
     * @return bool|null
     */
    public function getRedirectAutomatically()
    {
        return $this->container['redirect_automatically'];
    }

    /**
     * Sets redirect_automatically
     *
     * @param bool|null $redirect_automatically Whether user is redirected to specified redirect URL automatically after the invoice is paid
     *
     * @return self
     */
    public function setRedirectAutomatically($redirect_automatically)
    {
        if (is_null($redirect_automatically)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_automatically');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_automatically', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_automatically'] = $redirect_automatically;

        return $this;
    }

    /**
     * Gets html_lang
     *
     * @return string|null
     */
    public function getHtmlLang()
    {
        return $this->container['html_lang'];
    }

    /**
     * Sets html_lang
     *
     * @param string|null $html_lang Used for SEO, the [HTML Lang](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang) of the page
     *
     * @return self
     */
    public function setHtmlLang($html_lang)
    {
        if (is_null($html_lang)) {
            array_push($this->openAPINullablesSetToNull, 'html_lang');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('html_lang', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['html_lang'] = $html_lang;

        return $this;
    }

    /**
     * Gets html_meta_tags
     *
     * @return string|null
     */
    public function getHtmlMetaTags()
    {
        return $this->container['html_meta_tags'];
    }

    /**
     * Sets html_meta_tags
     *
     * @param string|null $html_meta_tags Used for SEO, the [Meta tags](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta) of the page
     *
     * @return self
     */
    public function setHtmlMetaTags($html_meta_tags)
    {
        if (is_null($html_meta_tags)) {
            array_push($this->openAPINullablesSetToNull, 'html_meta_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('html_meta_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['html_meta_tags'] = $html_meta_tags;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return string|null
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param string|null $form_id Form ID to request customer data
     *
     * @return self
     */
    public function setFormId($form_id)
    {
        if (is_null($form_id)) {
            array_push($this->openAPINullablesSetToNull, 'form_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template JSON of item available in the app
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


