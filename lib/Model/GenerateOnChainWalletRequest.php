<?php
/**
 * GenerateOnChainWalletRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GenerateOnChainWalletRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GenerateOnChainWalletRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GenerateOnChainWalletRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'label' => 'string',
        'existing_mnemonic' => 'string',
        'passphrase' => 'string',
        'account_number' => 'float',
        'save_private_keys' => 'bool',
        'import_keys_to_rpc' => 'bool',
        'word_list' => 'string',
        'word_count' => 'float',
        'script_pub_key_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'label' => null,
        'existing_mnemonic' => null,
        'passphrase' => null,
        'account_number' => null,
        'save_private_keys' => null,
        'import_keys_to_rpc' => null,
        'word_list' => null,
        'word_count' => null,
        'script_pub_key_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'label' => false,
        'existing_mnemonic' => false,
        'passphrase' => false,
        'account_number' => false,
        'save_private_keys' => false,
        'import_keys_to_rpc' => false,
        'word_list' => false,
        'word_count' => false,
        'script_pub_key_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
        'existing_mnemonic' => 'existingMnemonic',
        'passphrase' => 'passphrase',
        'account_number' => 'accountNumber',
        'save_private_keys' => 'savePrivateKeys',
        'import_keys_to_rpc' => 'importKeysToRPC',
        'word_list' => 'wordList',
        'word_count' => 'wordCount',
        'script_pub_key_type' => 'scriptPubKeyType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
        'existing_mnemonic' => 'setExistingMnemonic',
        'passphrase' => 'setPassphrase',
        'account_number' => 'setAccountNumber',
        'save_private_keys' => 'setSavePrivateKeys',
        'import_keys_to_rpc' => 'setImportKeysToRpc',
        'word_list' => 'setWordList',
        'word_count' => 'setWordCount',
        'script_pub_key_type' => 'setScriptPubKeyType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
        'existing_mnemonic' => 'getExistingMnemonic',
        'passphrase' => 'getPassphrase',
        'account_number' => 'getAccountNumber',
        'save_private_keys' => 'getSavePrivateKeys',
        'import_keys_to_rpc' => 'getImportKeysToRpc',
        'word_list' => 'getWordList',
        'word_count' => 'getWordCount',
        'script_pub_key_type' => 'getScriptPubKeyType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const WORD_LIST_CHINESE_SIMPLIFIED = 'ChineseSimplified';
    public const WORD_LIST_CHINESE_TRADITIONAL = 'ChineseTraditional';
    public const WORD_LIST_CZECH = 'Czech';
    public const WORD_LIST_ENGLISH = 'English';
    public const WORD_LIST_FRENCH = 'French';
    public const WORD_LIST_JAPANESE = 'Japanese';
    public const WORD_LIST_PORTUGUESE_BRAZIL = 'PortugueseBrazil';
    public const WORD_LIST_SPANISH = 'Spanish';
    public const WORD_COUNT_NUMBER_12 = 12;
    public const WORD_COUNT_NUMBER_15 = 15;
    public const WORD_COUNT_NUMBER_18 = 18;
    public const WORD_COUNT_NUMBER_21 = 21;
    public const WORD_COUNT_NUMBER_24 = 24;
    public const SCRIPT_PUB_KEY_TYPE_LEGACY = 'Legacy';
    public const SCRIPT_PUB_KEY_TYPE_SEGWIT = 'Segwit';
    public const SCRIPT_PUB_KEY_TYPE_SEGWIT_P2_SH = 'SegwitP2SH';
    public const SCRIPT_PUB_KEY_TYPE_TAPROOT_BIP86 = 'TaprootBIP86';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWordListAllowableValues()
    {
        return [
            self::WORD_LIST_CHINESE_SIMPLIFIED,
            self::WORD_LIST_CHINESE_TRADITIONAL,
            self::WORD_LIST_CZECH,
            self::WORD_LIST_ENGLISH,
            self::WORD_LIST_FRENCH,
            self::WORD_LIST_JAPANESE,
            self::WORD_LIST_PORTUGUESE_BRAZIL,
            self::WORD_LIST_SPANISH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWordCountAllowableValues()
    {
        return [
            self::WORD_COUNT_NUMBER_12,
            self::WORD_COUNT_NUMBER_15,
            self::WORD_COUNT_NUMBER_18,
            self::WORD_COUNT_NUMBER_21,
            self::WORD_COUNT_NUMBER_24,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScriptPubKeyTypeAllowableValues()
    {
        return [
            self::SCRIPT_PUB_KEY_TYPE_LEGACY,
            self::SCRIPT_PUB_KEY_TYPE_SEGWIT,
            self::SCRIPT_PUB_KEY_TYPE_SEGWIT_P2_SH,
            self::SCRIPT_PUB_KEY_TYPE_TAPROOT_BIP86,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('existing_mnemonic', $data ?? [], null);
        $this->setIfExists('passphrase', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], 0);
        $this->setIfExists('save_private_keys', $data ?? [], false);
        $this->setIfExists('import_keys_to_rpc', $data ?? [], false);
        $this->setIfExists('word_list', $data ?? [], 'English');
        $this->setIfExists('word_count', $data ?? [], self::WORD_COUNT_NUMBER_12);
        $this->setIfExists('script_pub_key_type', $data ?? [], 'Segwit');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getWordListAllowableValues();
        if (!is_null($this->container['word_list']) && !in_array($this->container['word_list'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'word_list', must be one of '%s'",
                $this->container['word_list'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWordCountAllowableValues();
        if (!is_null($this->container['word_count']) && !in_array($this->container['word_count'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'word_count', must be one of '%s'",
                $this->container['word_count'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getScriptPubKeyTypeAllowableValues();
        if (!is_null($this->container['script_pub_key_type']) && !in_array($this->container['script_pub_key_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'script_pub_key_type', must be one of '%s'",
                $this->container['script_pub_key_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label A label that will be shown in the UI
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets existing_mnemonic
     *
     * @return string|null
     */
    public function getExistingMnemonic()
    {
        return $this->container['existing_mnemonic'];
    }

    /**
     * Sets existing_mnemonic
     *
     * @param string|null $existing_mnemonic A BIP39 mnemonic
     *
     * @return self
     */
    public function setExistingMnemonic($existing_mnemonic)
    {
        if (is_null($existing_mnemonic)) {
            throw new \InvalidArgumentException('non-nullable existing_mnemonic cannot be null');
        }
        $this->container['existing_mnemonic'] = $existing_mnemonic;

        return $this;
    }

    /**
     * Gets passphrase
     *
     * @return string|null
     */
    public function getPassphrase()
    {
        return $this->container['passphrase'];
    }

    /**
     * Sets passphrase
     *
     * @param string|null $passphrase A passphrase for the BIP39 mnemonic seed
     *
     * @return self
     */
    public function setPassphrase($passphrase)
    {
        if (is_null($passphrase)) {
            throw new \InvalidArgumentException('non-nullable passphrase cannot be null');
        }
        $this->container['passphrase'] = $passphrase;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return float|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param float|null $account_number The account to derive from the BIP39 mnemonic seed
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets save_private_keys
     *
     * @return bool|null
     */
    public function getSavePrivateKeys()
    {
        return $this->container['save_private_keys'];
    }

    /**
     * Sets save_private_keys
     *
     * @param bool|null $save_private_keys Whether to store the seed inside BTCPay Server to enable some additional services. IF `false` AND `existingMnemonic` IS NOT SPECIFIED, BE SURE TO SECURELY STORE THE SEED IN THE RESPONSE!
     *
     * @return self
     */
    public function setSavePrivateKeys($save_private_keys)
    {
        if (is_null($save_private_keys)) {
            throw new \InvalidArgumentException('non-nullable save_private_keys cannot be null');
        }
        $this->container['save_private_keys'] = $save_private_keys;

        return $this;
    }

    /**
     * Gets import_keys_to_rpc
     *
     * @return bool|null
     */
    public function getImportKeysToRpc()
    {
        return $this->container['import_keys_to_rpc'];
    }

    /**
     * Sets import_keys_to_rpc
     *
     * @param bool|null $import_keys_to_rpc Whether to import all addresses generated via BTCPay Server into the underlying node wallet. (Private keys will also be imported if `savePrivateKeys` is set to true.
     *
     * @return self
     */
    public function setImportKeysToRpc($import_keys_to_rpc)
    {
        if (is_null($import_keys_to_rpc)) {
            throw new \InvalidArgumentException('non-nullable import_keys_to_rpc cannot be null');
        }
        $this->container['import_keys_to_rpc'] = $import_keys_to_rpc;

        return $this;
    }

    /**
     * Gets word_list
     *
     * @return string|null
     */
    public function getWordList()
    {
        return $this->container['word_list'];
    }

    /**
     * Sets word_list
     *
     * @param string|null $word_list If `existingMnemonic` is not set, a mnemonic is generated using the specified wordList.
     *
     * @return self
     */
    public function setWordList($word_list)
    {
        if (is_null($word_list)) {
            throw new \InvalidArgumentException('non-nullable word_list cannot be null');
        }
        $allowedValues = $this->getWordListAllowableValues();
        if (!in_array($word_list, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'word_list', must be one of '%s'",
                    $word_list,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['word_list'] = $word_list;

        return $this;
    }

    /**
     * Gets word_count
     *
     * @return float|null
     */
    public function getWordCount()
    {
        return $this->container['word_count'];
    }

    /**
     * Sets word_count
     *
     * @param float|null $word_count If `existingMnemonic` is not set, a mnemonic is generated using the specified wordCount.
     *
     * @return self
     */
    public function setWordCount($word_count)
    {
        if (is_null($word_count)) {
            throw new \InvalidArgumentException('non-nullable word_count cannot be null');
        }
        $allowedValues = $this->getWordCountAllowableValues();
        if (!in_array($word_count, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'word_count', must be one of '%s'",
                    $word_count,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['word_count'] = $word_count;

        return $this;
    }

    /**
     * Gets script_pub_key_type
     *
     * @return string|null
     */
    public function getScriptPubKeyType()
    {
        return $this->container['script_pub_key_type'];
    }

    /**
     * Sets script_pub_key_type
     *
     * @param string|null $script_pub_key_type the type of wallet to generate
     *
     * @return self
     */
    public function setScriptPubKeyType($script_pub_key_type)
    {
        if (is_null($script_pub_key_type)) {
            throw new \InvalidArgumentException('non-nullable script_pub_key_type cannot be null');
        }
        $allowedValues = $this->getScriptPubKeyTypeAllowableValues();
        if (!in_array($script_pub_key_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'script_pub_key_type', must be one of '%s'",
                    $script_pub_key_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['script_pub_key_type'] = $script_pub_key_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


