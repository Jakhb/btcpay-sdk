<?php
/**
 * InvoiceData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'metadata' => '\OpenAPI\Client\Model\InvoiceMetadata',
        'checkout' => '\OpenAPI\Client\Model\CheckoutOptions',
        'receipt' => '\OpenAPI\Client\Model\ReceiptOptions',
        'id' => 'string',
        'store_id' => 'string',
        'amount' => 'float',
        'paid_amount' => 'float',
        'currency' => 'string',
        'type' => '\OpenAPI\Client\Model\InvoiceType',
        'checkout_link' => 'string',
        'created_time' => 'float',
        'expiration_time' => 'float',
        'monitoring_expiration' => 'float',
        'status' => '\OpenAPI\Client\Model\InvoiceStatus',
        'additional_status' => '\OpenAPI\Client\Model\InvoiceAdditionalStatus',
        'available_statuses_for_manual_marking' => '\OpenAPI\Client\Model\InvoiceStatus[]',
        'archived' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'metadata' => null,
        'checkout' => null,
        'receipt' => null,
        'id' => null,
        'store_id' => null,
        'amount' => 'decimal',
        'paid_amount' => 'decimal',
        'currency' => null,
        'type' => null,
        'checkout_link' => null,
        'created_time' => 'int32',
        'expiration_time' => 'int32',
        'monitoring_expiration' => 'int32',
        'status' => null,
        'additional_status' => null,
        'available_statuses_for_manual_marking' => null,
        'archived' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'metadata' => false,
        'checkout' => true,
        'receipt' => true,
        'id' => false,
        'store_id' => false,
        'amount' => false,
        'paid_amount' => false,
        'currency' => false,
        'type' => false,
        'checkout_link' => false,
        'created_time' => false,
        'expiration_time' => false,
        'monitoring_expiration' => false,
        'status' => false,
        'additional_status' => false,
        'available_statuses_for_manual_marking' => false,
        'archived' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'metadata' => 'metadata',
        'checkout' => 'checkout',
        'receipt' => 'receipt',
        'id' => 'id',
        'store_id' => 'storeId',
        'amount' => 'amount',
        'paid_amount' => 'paidAmount',
        'currency' => 'currency',
        'type' => 'type',
        'checkout_link' => 'checkoutLink',
        'created_time' => 'createdTime',
        'expiration_time' => 'expirationTime',
        'monitoring_expiration' => 'monitoringExpiration',
        'status' => 'status',
        'additional_status' => 'additionalStatus',
        'available_statuses_for_manual_marking' => 'availableStatusesForManualMarking',
        'archived' => 'archived'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'metadata' => 'setMetadata',
        'checkout' => 'setCheckout',
        'receipt' => 'setReceipt',
        'id' => 'setId',
        'store_id' => 'setStoreId',
        'amount' => 'setAmount',
        'paid_amount' => 'setPaidAmount',
        'currency' => 'setCurrency',
        'type' => 'setType',
        'checkout_link' => 'setCheckoutLink',
        'created_time' => 'setCreatedTime',
        'expiration_time' => 'setExpirationTime',
        'monitoring_expiration' => 'setMonitoringExpiration',
        'status' => 'setStatus',
        'additional_status' => 'setAdditionalStatus',
        'available_statuses_for_manual_marking' => 'setAvailableStatusesForManualMarking',
        'archived' => 'setArchived'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'metadata' => 'getMetadata',
        'checkout' => 'getCheckout',
        'receipt' => 'getReceipt',
        'id' => 'getId',
        'store_id' => 'getStoreId',
        'amount' => 'getAmount',
        'paid_amount' => 'getPaidAmount',
        'currency' => 'getCurrency',
        'type' => 'getType',
        'checkout_link' => 'getCheckoutLink',
        'created_time' => 'getCreatedTime',
        'expiration_time' => 'getExpirationTime',
        'monitoring_expiration' => 'getMonitoringExpiration',
        'status' => 'getStatus',
        'additional_status' => 'getAdditionalStatus',
        'available_statuses_for_manual_marking' => 'getAvailableStatusesForManualMarking',
        'archived' => 'getArchived'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('checkout', $data ?? [], null);
        $this->setIfExists('receipt', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('paid_amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('checkout_link', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('expiration_time', $data ?? [], null);
        $this->setIfExists('monitoring_expiration', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('additional_status', $data ?? [], null);
        $this->setIfExists('available_statuses_for_manual_marking', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\InvoiceMetadata|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\InvoiceMetadata|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets checkout
     *
     * @return \OpenAPI\Client\Model\CheckoutOptions|null
     */
    public function getCheckout()
    {
        return $this->container['checkout'];
    }

    /**
     * Sets checkout
     *
     * @param \OpenAPI\Client\Model\CheckoutOptions|null $checkout Additional settings to customize the checkout flow
     *
     * @return self
     */
    public function setCheckout($checkout)
    {
        if (is_null($checkout)) {
            array_push($this->openAPINullablesSetToNull, 'checkout');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('checkout', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['checkout'] = $checkout;

        return $this;
    }

    /**
     * Gets receipt
     *
     * @return \OpenAPI\Client\Model\ReceiptOptions|null
     */
    public function getReceipt()
    {
        return $this->container['receipt'];
    }

    /**
     * Sets receipt
     *
     * @param \OpenAPI\Client\Model\ReceiptOptions|null $receipt Additional settings to customize the public receipt
     *
     * @return self
     */
    public function setReceipt($receipt)
    {
        if (is_null($receipt)) {
            array_push($this->openAPINullablesSetToNull, 'receipt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receipt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receipt'] = $receipt;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The identifier of the invoice
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id The store identifier that the invoice belongs to
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            throw new \InvalidArgumentException('non-nullable store_id cannot be null');
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount of the invoice. Note that the amount will be zero for a top-up invoice that is paid after invoice expiry.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return float|null
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param float|null $paid_amount The actual amount paid by the customer/buyer.
     *
     * @return self
     */
    public function setPaidAmount($paid_amount)
    {
        if (is_null($paid_amount)) {
            throw new \InvalidArgumentException('non-nullable paid_amount cannot be null');
        }
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency The currency of the invoice
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\InvoiceType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\InvoiceType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets checkout_link
     *
     * @return string|null
     */
    public function getCheckoutLink()
    {
        return $this->container['checkout_link'];
    }

    /**
     * Sets checkout_link
     *
     * @param string|null $checkout_link The link to the checkout page, where you can redirect the customer
     *
     * @return self
     */
    public function setCheckoutLink($checkout_link)
    {
        if (is_null($checkout_link)) {
            throw new \InvalidArgumentException('non-nullable checkout_link cannot be null');
        }
        $this->container['checkout_link'] = $checkout_link;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return float|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param float|null $created_time The creation time of the invoice
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            throw new \InvalidArgumentException('non-nullable created_time cannot be null');
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets expiration_time
     *
     * @return float|null
     */
    public function getExpirationTime()
    {
        return $this->container['expiration_time'];
    }

    /**
     * Sets expiration_time
     *
     * @param float|null $expiration_time The expiration time of the invoice
     *
     * @return self
     */
    public function setExpirationTime($expiration_time)
    {
        if (is_null($expiration_time)) {
            throw new \InvalidArgumentException('non-nullable expiration_time cannot be null');
        }
        $this->container['expiration_time'] = $expiration_time;

        return $this;
    }

    /**
     * Gets monitoring_expiration
     *
     * @return float|null
     */
    public function getMonitoringExpiration()
    {
        return $this->container['monitoring_expiration'];
    }

    /**
     * Sets monitoring_expiration
     *
     * @param float|null $monitoring_expiration Expiration time for monitoring of the invoice for any changes
     *
     * @return self
     */
    public function setMonitoringExpiration($monitoring_expiration)
    {
        if (is_null($monitoring_expiration)) {
            throw new \InvalidArgumentException('non-nullable monitoring_expiration cannot be null');
        }
        $this->container['monitoring_expiration'] = $monitoring_expiration;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\InvoiceStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\InvoiceStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets additional_status
     *
     * @return \OpenAPI\Client\Model\InvoiceAdditionalStatus|null
     */
    public function getAdditionalStatus()
    {
        return $this->container['additional_status'];
    }

    /**
     * Sets additional_status
     *
     * @param \OpenAPI\Client\Model\InvoiceAdditionalStatus|null $additional_status additional_status
     *
     * @return self
     */
    public function setAdditionalStatus($additional_status)
    {
        if (is_null($additional_status)) {
            throw new \InvalidArgumentException('non-nullable additional_status cannot be null');
        }
        $this->container['additional_status'] = $additional_status;

        return $this;
    }

    /**
     * Gets available_statuses_for_manual_marking
     *
     * @return \OpenAPI\Client\Model\InvoiceStatus[]|null
     */
    public function getAvailableStatusesForManualMarking()
    {
        return $this->container['available_statuses_for_manual_marking'];
    }

    /**
     * Sets available_statuses_for_manual_marking
     *
     * @param \OpenAPI\Client\Model\InvoiceStatus[]|null $available_statuses_for_manual_marking The statuses the invoice can be manually marked as
     *
     * @return self
     */
    public function setAvailableStatusesForManualMarking($available_statuses_for_manual_marking)
    {
        if (is_null($available_statuses_for_manual_marking)) {
            throw new \InvalidArgumentException('non-nullable available_statuses_for_manual_marking cannot be null');
        }
        $this->container['available_statuses_for_manual_marking'] = $available_statuses_for_manual_marking;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived true if the invoice is archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


