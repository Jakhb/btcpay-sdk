<?php
/**
 * CHAIN
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CHAIN Class Doc Comment
 *
 * @category Class
 * @description Bitcoin On-Chain payment information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CHAIN implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '__CHAIN';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key_path' => 'string',
        'payjoin_enabled' => 'bool',
        'account_derivation' => 'string',
        'recommended_fee_rate' => 'float',
        'payment_method_fee_rate' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key_path' => null,
        'payjoin_enabled' => null,
        'account_derivation' => null,
        'recommended_fee_rate' => 'decimal',
        'payment_method_fee_rate' => 'decimal'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key_path' => false,
        'payjoin_enabled' => false,
        'account_derivation' => false,
        'recommended_fee_rate' => false,
        'payment_method_fee_rate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key_path' => 'keyPath',
        'payjoin_enabled' => 'payjoinEnabled',
        'account_derivation' => 'accountDerivation',
        'recommended_fee_rate' => 'recommendedFeeRate',
        'payment_method_fee_rate' => 'paymentMethodFeeRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key_path' => 'setKeyPath',
        'payjoin_enabled' => 'setPayjoinEnabled',
        'account_derivation' => 'setAccountDerivation',
        'recommended_fee_rate' => 'setRecommendedFeeRate',
        'payment_method_fee_rate' => 'setPaymentMethodFeeRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key_path' => 'getKeyPath',
        'payjoin_enabled' => 'getPayjoinEnabled',
        'account_derivation' => 'getAccountDerivation',
        'recommended_fee_rate' => 'getRecommendedFeeRate',
        'payment_method_fee_rate' => 'getPaymentMethodFeeRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('key_path', $data ?? [], null);
        $this->setIfExists('payjoin_enabled', $data ?? [], null);
        $this->setIfExists('account_derivation', $data ?? [], null);
        $this->setIfExists('recommended_fee_rate', $data ?? [], null);
        $this->setIfExists('payment_method_fee_rate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key_path
     *
     * @return string|null
     */
    public function getKeyPath()
    {
        return $this->container['key_path'];
    }

    /**
     * Sets key_path
     *
     * @param string|null $key_path The key path relative to the account derviation key.
     *
     * @return self
     */
    public function setKeyPath($key_path)
    {
        if (is_null($key_path)) {
            throw new \InvalidArgumentException('non-nullable key_path cannot be null');
        }
        $this->container['key_path'] = $key_path;

        return $this;
    }

    /**
     * Gets payjoin_enabled
     *
     * @return bool|null
     */
    public function getPayjoinEnabled()
    {
        return $this->container['payjoin_enabled'];
    }

    /**
     * Sets payjoin_enabled
     *
     * @param bool|null $payjoin_enabled If the payjoin feature is enabled for this payment method.
     *
     * @return self
     */
    public function setPayjoinEnabled($payjoin_enabled)
    {
        if (is_null($payjoin_enabled)) {
            throw new \InvalidArgumentException('non-nullable payjoin_enabled cannot be null');
        }
        $this->container['payjoin_enabled'] = $payjoin_enabled;

        return $this;
    }

    /**
     * Gets account_derivation
     *
     * @return string|null
     */
    public function getAccountDerivation()
    {
        return $this->container['account_derivation'];
    }

    /**
     * Sets account_derivation
     *
     * @param string|null $account_derivation The derivation scheme used to derive addresses (null if `includeSensitive` is `false`)
     *
     * @return self
     */
    public function setAccountDerivation($account_derivation)
    {
        if (is_null($account_derivation)) {
            throw new \InvalidArgumentException('non-nullable account_derivation cannot be null');
        }
        $this->container['account_derivation'] = $account_derivation;

        return $this;
    }

    /**
     * Gets recommended_fee_rate
     *
     * @return float|null
     */
    public function getRecommendedFeeRate()
    {
        return $this->container['recommended_fee_rate'];
    }

    /**
     * Sets recommended_fee_rate
     *
     * @param float|null $recommended_fee_rate The recommended fee rate for this payment method.
     *
     * @return self
     */
    public function setRecommendedFeeRate($recommended_fee_rate)
    {
        if (is_null($recommended_fee_rate)) {
            throw new \InvalidArgumentException('non-nullable recommended_fee_rate cannot be null');
        }
        $this->container['recommended_fee_rate'] = $recommended_fee_rate;

        return $this;
    }

    /**
     * Gets payment_method_fee_rate
     *
     * @return float|null
     */
    public function getPaymentMethodFeeRate()
    {
        return $this->container['payment_method_fee_rate'];
    }

    /**
     * Sets payment_method_fee_rate
     *
     * @param float|null $payment_method_fee_rate The fee rate charged to the user as `PaymentMethodFee`.
     *
     * @return self
     */
    public function setPaymentMethodFeeRate($payment_method_fee_rate)
    {
        if (is_null($payment_method_fee_rate)) {
            throw new \InvalidArgumentException('non-nullable payment_method_fee_rate cannot be null');
        }
        $this->container['payment_method_fee_rate'] = $payment_method_fee_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


