<?php
/**
 * InvoicesRefundRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BTCPay Greenfield API
 *
 * # Introduction  The BTCPay Server Greenfield API is a REST API. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  # Authentication  You can authenticate either via Basic Auth or an API key. It's recommended to use an API key for better security. You can create an API key in the BTCPay Server UI under `Account` -> `Manage Account` -> `API keys`. You can restrict the API key for one or multiple stores and for specific permissions. For testing purposes, you can give it the 'Unrestricted access' permission. On production you should limit the permissions to the actual endpoints you use, you can see the required permission on the API docs at the top of each endpoint under `AUTHORIZATIONS`.  If you want to simplify the process of creating API keys for your users, you can use the [Authorization endpoint](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization) to predefine permissions and redirect your users to the BTCPay Server Authorization UI. You can find more information about this on the [API Authorization Flow docs](https://docs.btcpayserver.org/BTCPayServer/greenfield-authorization/) page.  # Usage examples  Use **Basic Auth** to read store information with cURL: ```bash BTCPAY_INSTANCE=\"https://mainnet.demo.btcpayserver.org\" USER=\"MyTestUser@gmail.com\" PASSWORD=\"notverysecurepassword\" PERMISSION=\"btcpay.store.canmodifystoresettings\" BODY=\"$(echo \"{}\" | jq --arg \"a\" \"$PERMISSION\" '. + {permissions:[$a]}')\"  API_KEY=\"$(curl -s \\      -H \"Content-Type: application/json\" \\      --user \"$USER:$PASSWORD\" \\      -X POST \\      -d \"$BODY\" \\      \"$BTCPAY_INSTANCE/api/v1/api-keys\" | jq -r .apiKey)\" ```   Use an **API key** to read store information with cURL: ```bash STORE_ID=\"yourStoreId\"  curl -s \\      -H \"Content-Type: application/json\" \\      -H \"Authorization: token $API_KEY\" \\      -X GET \\      \"$BTCPAY_INSTANCE/api/v1/stores/$STORE_ID\" ```  You can find more examples on our docs for different programming languages: - [cURL](https://docs.btcpayserver.org/Development/GreenFieldExample/) - [Javascript/Node.Js](https://docs.btcpayserver.org/Development/GreenFieldExample-NodeJS/) - [PHP](https://docs.btcpayserver.org/Development/GreenFieldExample-PHP/)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoicesRefundRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoicesRefundRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invoices_Refund_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'payout_method_id' => 'string',
        'refund_variant' => 'string',
        'subtract_percentage' => 'float',
        'custom_amount' => 'float',
        'custom_currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'payout_method_id' => null,
        'refund_variant' => null,
        'subtract_percentage' => 'decimal',
        'custom_amount' => 'decimal',
        'custom_currency' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => true,
        'description' => false,
        'payout_method_id' => false,
        'refund_variant' => false,
        'subtract_percentage' => false,
        'custom_amount' => false,
        'custom_currency' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'payout_method_id' => 'payoutMethodId',
        'refund_variant' => 'refundVariant',
        'subtract_percentage' => 'subtractPercentage',
        'custom_amount' => 'customAmount',
        'custom_currency' => 'customCurrency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'payout_method_id' => 'setPayoutMethodId',
        'refund_variant' => 'setRefundVariant',
        'subtract_percentage' => 'setSubtractPercentage',
        'custom_amount' => 'setCustomAmount',
        'custom_currency' => 'setCustomCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'payout_method_id' => 'getPayoutMethodId',
        'refund_variant' => 'getRefundVariant',
        'subtract_percentage' => 'getSubtractPercentage',
        'custom_amount' => 'getCustomAmount',
        'custom_currency' => 'getCustomCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REFUND_VARIANT_CURRENT_RATE = 'CurrentRate';
    public const REFUND_VARIANT_CUSTOM = 'Custom';
    public const REFUND_VARIANT_FIAT = 'Fiat';
    public const REFUND_VARIANT_OVERPAID_AMOUNT = 'OverpaidAmount';
    public const REFUND_VARIANT_RATE_THEN = 'RateThen';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRefundVariantAllowableValues()
    {
        return [
            self::REFUND_VARIANT_CURRENT_RATE,
            self::REFUND_VARIANT_CUSTOM,
            self::REFUND_VARIANT_FIAT,
            self::REFUND_VARIANT_OVERPAID_AMOUNT,
            self::REFUND_VARIANT_RATE_THEN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('payout_method_id', $data ?? [], null);
        $this->setIfExists('refund_variant', $data ?? [], null);
        $this->setIfExists('subtract_percentage', $data ?? [], null);
        $this->setIfExists('custom_amount', $data ?? [], null);
        $this->setIfExists('custom_currency', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRefundVariantAllowableValues();
        if (!is_null($this->container['refund_variant']) && !in_array($this->container['refund_variant'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'refund_variant', must be one of '%s'",
                $this->container['refund_variant'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the pull payment (Default: 'Refund' followed by the invoice id)
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the pull payment
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets payout_method_id
     *
     * @return string|null
     */
    public function getPayoutMethodId()
    {
        return $this->container['payout_method_id'];
    }

    /**
     * Sets payout_method_id
     *
     * @param string|null $payout_method_id Payout method IDs. Available payment method IDs for Bitcoin are:   - `\"BTC-CHAIN\"`: Onchain    -`\"BTC-LN\"`: Lightning
     *
     * @return self
     */
    public function setPayoutMethodId($payout_method_id)
    {
        if (is_null($payout_method_id)) {
            throw new \InvalidArgumentException('non-nullable payout_method_id cannot be null');
        }
        $this->container['payout_method_id'] = $payout_method_id;

        return $this;
    }

    /**
     * Gets refund_variant
     *
     * @return string|null
     */
    public function getRefundVariant()
    {
        return $this->container['refund_variant'];
    }

    /**
     * Sets refund_variant
     *
     * @param string|null $refund_variant * `RateThen`: Refund the crypto currency price, at the rate the invoice got paid.  * `CurrentRate`: Refund the crypto currency price, at the current rate.  *`Fiat`: Refund the invoice currency, at the rate when the refund will be sent.  *`OverpaidAmount`: Refund the crypto currency amount that was overpaid.  *`Custom`: Specify the amount, currency, and rate of the refund. (see `customAmount` and `customCurrency`)
     *
     * @return self
     */
    public function setRefundVariant($refund_variant)
    {
        if (is_null($refund_variant)) {
            throw new \InvalidArgumentException('non-nullable refund_variant cannot be null');
        }
        $allowedValues = $this->getRefundVariantAllowableValues();
        if (!in_array($refund_variant, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'refund_variant', must be one of '%s'",
                    $refund_variant,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['refund_variant'] = $refund_variant;

        return $this;
    }

    /**
     * Gets subtract_percentage
     *
     * @return float|null
     */
    public function getSubtractPercentage()
    {
        return $this->container['subtract_percentage'];
    }

    /**
     * Sets subtract_percentage
     *
     * @param float|null $subtract_percentage Optional percentage by which to reduce the refund, e.g. as processing charge or to compensate for the mining fee.
     *
     * @return self
     */
    public function setSubtractPercentage($subtract_percentage)
    {
        if (is_null($subtract_percentage)) {
            throw new \InvalidArgumentException('non-nullable subtract_percentage cannot be null');
        }
        $this->container['subtract_percentage'] = $subtract_percentage;

        return $this;
    }

    /**
     * Gets custom_amount
     *
     * @return float|null
     */
    public function getCustomAmount()
    {
        return $this->container['custom_amount'];
    }

    /**
     * Sets custom_amount
     *
     * @param float|null $custom_amount The amount to refund if the `refundVariant` is `Custom`.
     *
     * @return self
     */
    public function setCustomAmount($custom_amount)
    {
        if (is_null($custom_amount)) {
            throw new \InvalidArgumentException('non-nullable custom_amount cannot be null');
        }
        $this->container['custom_amount'] = $custom_amount;

        return $this;
    }

    /**
     * Gets custom_currency
     *
     * @return string|null
     */
    public function getCustomCurrency()
    {
        return $this->container['custom_currency'];
    }

    /**
     * Sets custom_currency
     *
     * @param string|null $custom_currency The currency to refund if the `refundVariant` is `Custom`
     *
     * @return self
     */
    public function setCustomCurrency($custom_currency)
    {
        if (is_null($custom_currency)) {
            throw new \InvalidArgumentException('non-nullable custom_currency cannot be null');
        }
        $this->container['custom_currency'] = $custom_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


